"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const compiler_1 = __importDefault(require("../raw/compiler"));
const factory_1 = require("./commands/factory");
const switch_to_iframe_1 = require("./commands/switch-to-iframe");
const switch_to_main_window_1 = require("./commands/switch-to-main-window");
const TEST_BASE = JSON.stringify({
    fixtures: [
        {
            name: 'New Fixture',
            tests: [
                {
                    name: 'New Test',
                    commands: [],
                },
            ],
        },
    ],
});
class DevToolsTestFileCompiler extends compiler_1.default {
    constructor() {
        super(...arguments);
        this.raw = { fixtures: [] };
    }
    _hasTests() {
        return true;
    }
    get _fixture() {
        return this.raw.fixtures[0];
    }
    get _test() {
        return this._fixture.tests[0];
    }
    getSupportedExtension() {
        return '.json';
    }
    compile(code, filename) {
        this.raw = JSON.parse(TEST_BASE);
        const preprocessedCode = this._preProcess(code, filename);
        if (!preprocessedCode)
            return [];
        return super.compile(preprocessedCode, filename);
    }
    _preProcess(code, filename) {
        const parsedCode = JSON.parse(code);
        this._fixture.name = parsedCode.title;
        this._test.name = parsedCode.title;
        if (!parsedCode.steps)
            return null;
        parsedCode.steps.forEach((step, i) => this._processStep(step, filename, i));
        return JSON.stringify(this.raw);
    }
    _processStep(step, filename, i) {
        const transformer = factory_1.CommandTransformerFactory.create(step, filename, i);
        if (transformer) {
            this._onBeforeCommandExecute(step);
            this._test.commands.push(transformer.transform());
            this._onAfterCommandExecute(step);
        }
    }
    _onBeforeCommandExecute(step) {
        if (!step.frame)
            return;
        const frames = step.frame;
        for (const frame of frames)
            this._test.commands.push(new switch_to_iframe_1.SwitchToIframeCommandTransformer({ frame }, 0).transform());
    }
    _onAfterCommandExecute(step) {
        this._test.commands.push(new switch_to_main_window_1.SwitchToMainWindowCommandTransformer(step, 0).transform());
    }
}
exports.default = DevToolsTestFileCompiler;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGlsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcGlsZXIvdGVzdC1maWxlL2Zvcm1hdHMvZGV2LXRvb2xzL2NvbXBpbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsK0RBQWtEO0FBRWxELGdEQUErRDtBQUMvRCxrRUFBK0U7QUFDL0UsNEVBQXdGO0FBU3hGLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDN0IsUUFBUSxFQUFFO1FBQ047WUFDSSxJQUFJLEVBQUcsYUFBYTtZQUNwQixLQUFLLEVBQUU7Z0JBQ0g7b0JBQ0ksSUFBSSxFQUFNLFVBQVU7b0JBQ3BCLFFBQVEsRUFBRSxFQUFFO2lCQUNmO2FBQ0o7U0FDSjtLQUNKO0NBQ0osQ0FBQyxDQUFDO0FBRUgsTUFBcUIsd0JBQXlCLFNBQVEsa0JBQW1CO0lBQXpFOztRQUNZLFFBQUcsR0FBaUIsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLENBQUM7SUFrRWpELENBQUM7SUFoRUcsU0FBUztRQUNMLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxJQUFJLFFBQVE7UUFDUixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDTCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxxQkFBcUI7UUFDakIsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztJQUVELE9BQU8sQ0FBRSxJQUFZLEVBQUUsUUFBZ0I7UUFDbkMsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRWpDLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFMUQsSUFBSSxDQUFDLGdCQUFnQjtZQUNqQixPQUFPLEVBQUUsQ0FBQztRQUVkLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsV0FBVyxDQUFFLElBQVksRUFBRSxRQUFnQjtRQUN2QyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXBDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUM7UUFDdEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQU0sVUFBVSxDQUFDLEtBQUssQ0FBQztRQUV0QyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUs7WUFDakIsT0FBTyxJQUFJLENBQUM7UUFFaEIsVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUEwQixFQUFFLENBQVMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFMUcsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQsWUFBWSxDQUFFLElBQTBCLEVBQUUsUUFBZSxFQUFFLENBQVM7UUFDaEUsTUFBTSxXQUFXLEdBQUcsbUNBQXlCLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFeEUsSUFBSSxXQUFXLEVBQUU7WUFDYixJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbkMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO1lBQ2xELElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNyQztJQUNMLENBQUM7SUFFRCx1QkFBdUIsQ0FBRSxJQUEwQjtRQUMvQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUs7WUFDWCxPQUFPO1FBRVgsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQWlCLENBQUM7UUFFdEMsS0FBSyxNQUFNLEtBQUssSUFBSSxNQUFNO1lBQ3RCLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLG1EQUFnQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztJQUNqRyxDQUFDO0lBRUQsc0JBQXNCLENBQUUsSUFBMEI7UUFDOUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksNERBQW9DLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFDNUYsQ0FBQztDQUNKO0FBbkVELDJDQW1FQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSYXdUZXN0RmlsZUNvbXBpbGVyIGZyb20gJy4uL3Jhdy9jb21waWxlcic7XG5pbXBvcnQgVGVzdCBmcm9tICcuLi8uLi8uLi8uLi9hcGkvc3RydWN0dXJlL3Rlc3QnO1xuaW1wb3J0IHsgQ29tbWFuZFRyYW5zZm9ybWVyRmFjdG9yeSB9IGZyb20gJy4vY29tbWFuZHMvZmFjdG9yeSc7XG5pbXBvcnQgeyBTd2l0Y2hUb0lmcmFtZUNvbW1hbmRUcmFuc2Zvcm1lciB9IGZyb20gJy4vY29tbWFuZHMvc3dpdGNoLXRvLWlmcmFtZSc7XG5pbXBvcnQgeyBTd2l0Y2hUb01haW5XaW5kb3dDb21tYW5kVHJhbnNmb3JtZXIgfSBmcm9tICcuL2NvbW1hbmRzL3N3aXRjaC10by1tYWluLXdpbmRvdyc7XG5cbmltcG9ydCB7XG4gICAgRGV2VG9vbHNSZWNvcmRlclN0ZXAsXG4gICAgUmF3Rml4dHVyZSxcbiAgICBSYXdSZWNvcmRpbmcsXG4gICAgUmF3VGVzdCxcbn0gZnJvbSAnLi90eXBlcyc7XG5cbmNvbnN0IFRFU1RfQkFTRSA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICBmaXh0dXJlczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAgJ05ldyBGaXh0dXJlJyxcbiAgICAgICAgICAgIHRlc3RzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAgICAgJ05ldyBUZXN0JyxcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZHM6IFtdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgIF0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGV2VG9vbHNUZXN0RmlsZUNvbXBpbGVyIGV4dGVuZHMgUmF3VGVzdEZpbGVDb21waWxlciB7XG4gICAgcHJpdmF0ZSByYXc6IFJhd1JlY29yZGluZyA9IHsgZml4dHVyZXM6IFtdIH07XG5cbiAgICBfaGFzVGVzdHMgKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBnZXQgX2ZpeHR1cmUgKCk6IFJhd0ZpeHR1cmUge1xuICAgICAgICByZXR1cm4gdGhpcy5yYXcuZml4dHVyZXNbMF07XG4gICAgfVxuXG4gICAgZ2V0IF90ZXN0ICgpOiBSYXdUZXN0IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpeHR1cmUudGVzdHNbMF07XG4gICAgfVxuXG4gICAgZ2V0U3VwcG9ydGVkRXh0ZW5zaW9uICgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gJy5qc29uJztcbiAgICB9XG5cbiAgICBjb21waWxlIChjb2RlOiBzdHJpbmcsIGZpbGVuYW1lOiBzdHJpbmcpOiBUZXN0W10ge1xuICAgICAgICB0aGlzLnJhdyA9IEpTT04ucGFyc2UoVEVTVF9CQVNFKTtcblxuICAgICAgICBjb25zdCBwcmVwcm9jZXNzZWRDb2RlID0gdGhpcy5fcHJlUHJvY2Vzcyhjb2RlLCBmaWxlbmFtZSk7XG5cbiAgICAgICAgaWYgKCFwcmVwcm9jZXNzZWRDb2RlKVxuICAgICAgICAgICAgcmV0dXJuIFtdO1xuXG4gICAgICAgIHJldHVybiBzdXBlci5jb21waWxlKHByZXByb2Nlc3NlZENvZGUsIGZpbGVuYW1lKTtcbiAgICB9XG5cbiAgICBfcHJlUHJvY2VzcyAoY29kZTogc3RyaW5nLCBmaWxlbmFtZTogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgICAgIGNvbnN0IHBhcnNlZENvZGUgPSBKU09OLnBhcnNlKGNvZGUpO1xuXG4gICAgICAgIHRoaXMuX2ZpeHR1cmUubmFtZSA9IHBhcnNlZENvZGUudGl0bGU7XG4gICAgICAgIHRoaXMuX3Rlc3QubmFtZSAgICA9IHBhcnNlZENvZGUudGl0bGU7XG5cbiAgICAgICAgaWYgKCFwYXJzZWRDb2RlLnN0ZXBzKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgcGFyc2VkQ29kZS5zdGVwcy5mb3JFYWNoKChzdGVwOiBEZXZUb29sc1JlY29yZGVyU3RlcCwgaTogbnVtYmVyKSA9PiB0aGlzLl9wcm9jZXNzU3RlcChzdGVwLCBmaWxlbmFtZSwgaSkpO1xuXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnJhdyk7XG4gICAgfVxuXG4gICAgX3Byb2Nlc3NTdGVwIChzdGVwOiBEZXZUb29sc1JlY29yZGVyU3RlcCwgZmlsZW5hbWU6c3RyaW5nLCBpOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgdHJhbnNmb3JtZXIgPSBDb21tYW5kVHJhbnNmb3JtZXJGYWN0b3J5LmNyZWF0ZShzdGVwLCBmaWxlbmFtZSwgaSk7XG5cbiAgICAgICAgaWYgKHRyYW5zZm9ybWVyKSB7XG4gICAgICAgICAgICB0aGlzLl9vbkJlZm9yZUNvbW1hbmRFeGVjdXRlKHN0ZXApO1xuICAgICAgICAgICAgdGhpcy5fdGVzdC5jb21tYW5kcy5wdXNoKHRyYW5zZm9ybWVyLnRyYW5zZm9ybSgpKTtcbiAgICAgICAgICAgIHRoaXMuX29uQWZ0ZXJDb21tYW5kRXhlY3V0ZShzdGVwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9vbkJlZm9yZUNvbW1hbmRFeGVjdXRlIChzdGVwOiBEZXZUb29sc1JlY29yZGVyU3RlcCk6IHZvaWQge1xuICAgICAgICBpZiAoIXN0ZXAuZnJhbWUpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgY29uc3QgZnJhbWVzID0gc3RlcC5mcmFtZSBhcyBudW1iZXJbXTtcblxuICAgICAgICBmb3IgKGNvbnN0IGZyYW1lIG9mIGZyYW1lcylcbiAgICAgICAgICAgIHRoaXMuX3Rlc3QuY29tbWFuZHMucHVzaChuZXcgU3dpdGNoVG9JZnJhbWVDb21tYW5kVHJhbnNmb3JtZXIoeyBmcmFtZSB9LCAwKS50cmFuc2Zvcm0oKSk7XG4gICAgfVxuXG4gICAgX29uQWZ0ZXJDb21tYW5kRXhlY3V0ZSAoc3RlcDogRGV2VG9vbHNSZWNvcmRlclN0ZXApOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fdGVzdC5jb21tYW5kcy5wdXNoKG5ldyBTd2l0Y2hUb01haW5XaW5kb3dDb21tYW5kVHJhbnNmb3JtZXIoc3RlcCwgMCkudHJhbnNmb3JtKCkpO1xuICAgIH1cbn1cbiJdfQ==