"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const load_libs_1 = __importDefault(require("../../../babel/load-libs"));
const api_based_1 = __importDefault(require("../../api-based"));
const is_flow_code_1 = __importDefault(require("./is-flow-code"));
const get_base_babel_options_1 = __importDefault(require("../../../babel/get-base-babel-options"));
const disable_v8_optimization_note_1 = __importDefault(require("../../disable-v8-optimization-note"));
const extensions_1 = __importDefault(require("../extensions"));
//NOTE: The semicolon ; prevents the declaration from being bound with eval
const DISABLE_V8_OPTIMIZATION_CODE = `;/*${disable_v8_optimization_note_1.default}*/
eval("");
`;
class ESNextTestFileCompiler extends api_based_1.default {
    static getBabelOptions(filename, code, { isCompilerServiceMode, experimentalEsm } = {}) {
        const { presetStage2, presetFlow, transformRuntime, presetEnvForTestCode, presetReact, moduleResolver, proposalPrivateMethods, proposalClassProperties, } = (0, load_libs_1.default)({ isCompilerServiceMode, experimentalEsm });
        const opts = Object.assign({}, get_base_babel_options_1.default, {
            presets: [presetStage2, presetEnvForTestCode, presetReact],
            plugins: [transformRuntime, moduleResolver, proposalPrivateMethods, proposalClassProperties],
            sourceMaps: 'inline',
            filename,
        });
        if ((0, is_flow_code_1.default)(code))
            opts.presets.push(presetFlow);
        return opts;
    }
    _compileCode(code, filename) {
        const { babel } = (0, load_libs_1.default)(this);
        if (this.cache[filename])
            return this.cache[filename];
        if (this.isCompilerServiceMode || this.experimentalEsm)
            code += DISABLE_V8_OPTIMIZATION_CODE;
        const opts = ESNextTestFileCompiler.getBabelOptions(filename, code, this);
        const compiled = babel.transform(code, opts);
        this.cache[filename] = compiled.code;
        return compiled.code;
    }
    _getRequireCompilers() {
        const requireCompilers = {
            [extensions_1.default.js]: (code, filename) => this._compileCode(code, filename),
            [extensions_1.default.jsx]: (code, filename) => this._compileCode(code, filename),
            [extensions_1.default.cjs]: (code, filename) => this._compileCode(code, filename),
        };
        if (this.experimentalEsm)
            requireCompilers[extensions_1.default.mjs] = (code, filename) => this._compileCode(code, filename);
        return requireCompilers;
    }
    get canCompileInEsm() {
        return true;
    }
    getSupportedExtension() {
        const supportedExtensions = [extensions_1.default.js, extensions_1.default.jsx, extensions_1.default.cjs, extensions_1.default.mjs];
        return supportedExtensions;
    }
}
exports.default = ESNextTestFileCompiler;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGlsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcGlsZXIvdGVzdC1maWxlL2Zvcm1hdHMvZXMtbmV4dC9jb21waWxlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHlFQUFxRDtBQUNyRCxnRUFBMkQ7QUFDM0Qsa0VBQXdDO0FBQ3hDLG1HQUF1RTtBQUN2RSxzR0FBOEU7QUFDOUUsK0RBQXVDO0FBRXZDLDJFQUEyRTtBQUMzRSxNQUFNLDRCQUE0QixHQUNsQyxNQUFNLHNDQUE0Qjs7Q0FFakMsQ0FBQztBQUVGLE1BQXFCLHNCQUF1QixTQUFRLG1CQUE0QjtJQUU1RSxNQUFNLENBQUMsZUFBZSxDQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsRUFBRSxxQkFBcUIsRUFBRSxlQUFlLEVBQUUsR0FBRyxFQUFFO1FBQ25GLE1BQU0sRUFDRixZQUFZLEVBQ1osVUFBVSxFQUNWLGdCQUFnQixFQUNoQixvQkFBb0IsRUFDcEIsV0FBVyxFQUNYLGNBQWMsRUFDZCxzQkFBc0IsRUFDdEIsdUJBQXVCLEdBQzFCLEdBQUcsSUFBQSxtQkFBYSxFQUFDLEVBQUUscUJBQXFCLEVBQUUsZUFBZSxFQUFFLENBQUMsQ0FBQztRQUU5RCxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxnQ0FBa0IsRUFBRTtZQUMvQyxPQUFPLEVBQUssQ0FBQyxZQUFZLEVBQUUsb0JBQW9CLEVBQUUsV0FBVyxDQUFDO1lBQzdELE9BQU8sRUFBSyxDQUFDLGdCQUFnQixFQUFFLGNBQWMsRUFBRSxzQkFBc0IsRUFBRSx1QkFBdUIsQ0FBQztZQUMvRixVQUFVLEVBQUUsUUFBUTtZQUNwQixRQUFRO1NBQ1gsQ0FBQyxDQUFDO1FBRUgsSUFBSSxJQUFBLHNCQUFVLEVBQUMsSUFBSSxDQUFDO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRWxDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxZQUFZLENBQUUsSUFBSSxFQUFFLFFBQVE7UUFDeEIsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLElBQUEsbUJBQWEsRUFBQyxJQUFJLENBQUMsQ0FBQztRQUV0QyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO1lBQ3BCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVoQyxJQUFJLElBQUksQ0FBQyxxQkFBcUIsSUFBSSxJQUFJLENBQUMsZUFBZTtZQUNsRCxJQUFJLElBQUksNEJBQTRCLENBQUM7UUFFekMsTUFBTSxJQUFJLEdBQU8sc0JBQXNCLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDOUUsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFN0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBRXJDLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQztJQUN6QixDQUFDO0lBRUQsb0JBQW9CO1FBQ2hCLE1BQU0sZ0JBQWdCLEdBQUc7WUFDckIsQ0FBQyxvQkFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFHLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDO1lBQ3ZFLENBQUMsb0JBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQztZQUN2RSxDQUFDLG9CQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUM7U0FDMUUsQ0FBQztRQUVGLElBQUksSUFBSSxDQUFDLGVBQWU7WUFDcEIsZ0JBQWdCLENBQUMsb0JBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRTdGLE9BQU8sZ0JBQWdCLENBQUM7SUFDNUIsQ0FBQztJQUVELElBQUksZUFBZTtRQUNmLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxxQkFBcUI7UUFDakIsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLG9CQUFVLENBQUMsRUFBRSxFQUFFLG9CQUFVLENBQUMsR0FBRyxFQUFFLG9CQUFVLENBQUMsR0FBRyxFQUFFLG9CQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFNUYsT0FBTyxtQkFBbUIsQ0FBQztJQUMvQixDQUFDO0NBQ0o7QUFsRUQseUNBa0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvYWRCYWJlbExpYnMgZnJvbSAnLi4vLi4vLi4vYmFiZWwvbG9hZC1saWJzJztcbmltcG9ydCBBUElCYXNlZFRlc3RGaWxlQ29tcGlsZXJCYXNlIGZyb20gJy4uLy4uL2FwaS1iYXNlZCc7XG5pbXBvcnQgaXNGbG93Q29kZSBmcm9tICcuL2lzLWZsb3ctY29kZSc7XG5pbXBvcnQgQkFTRV9CQUJFTF9PUFRJT05TIGZyb20gJy4uLy4uLy4uL2JhYmVsL2dldC1iYXNlLWJhYmVsLW9wdGlvbnMnO1xuaW1wb3J0IERJU0FCTEVfVjhfT1BUSU1JWkFUSU9OX05PVEUgZnJvbSAnLi4vLi4vZGlzYWJsZS12OC1vcHRpbWl6YXRpb24tbm90ZSc7XG5pbXBvcnQgRXh0ZW5zaW9ucyBmcm9tICcuLi9leHRlbnNpb25zJztcblxuLy9OT1RFOiBUaGUgc2VtaWNvbG9uIDsgcHJldmVudHMgdGhlIGRlY2xhcmF0aW9uIGZyb20gYmVpbmcgYm91bmQgd2l0aCBldmFsXG5jb25zdCBESVNBQkxFX1Y4X09QVElNSVpBVElPTl9DT0RFID1cbmA7Lyoke0RJU0FCTEVfVjhfT1BUSU1JWkFUSU9OX05PVEV9Ki9cbmV2YWwoXCJcIik7XG5gO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFU05leHRUZXN0RmlsZUNvbXBpbGVyIGV4dGVuZHMgQVBJQmFzZWRUZXN0RmlsZUNvbXBpbGVyQmFzZSB7XG5cbiAgICBzdGF0aWMgZ2V0QmFiZWxPcHRpb25zIChmaWxlbmFtZSwgY29kZSwgeyBpc0NvbXBpbGVyU2VydmljZU1vZGUsIGV4cGVyaW1lbnRhbEVzbSB9ID0ge30pIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgcHJlc2V0U3RhZ2UyLFxuICAgICAgICAgICAgcHJlc2V0RmxvdyxcbiAgICAgICAgICAgIHRyYW5zZm9ybVJ1bnRpbWUsXG4gICAgICAgICAgICBwcmVzZXRFbnZGb3JUZXN0Q29kZSxcbiAgICAgICAgICAgIHByZXNldFJlYWN0LFxuICAgICAgICAgICAgbW9kdWxlUmVzb2x2ZXIsXG4gICAgICAgICAgICBwcm9wb3NhbFByaXZhdGVNZXRob2RzLFxuICAgICAgICAgICAgcHJvcG9zYWxDbGFzc1Byb3BlcnRpZXMsXG4gICAgICAgIH0gPSBsb2FkQmFiZWxMaWJzKHsgaXNDb21waWxlclNlcnZpY2VNb2RlLCBleHBlcmltZW50YWxFc20gfSk7XG5cbiAgICAgICAgY29uc3Qgb3B0cyA9IE9iamVjdC5hc3NpZ24oe30sIEJBU0VfQkFCRUxfT1BUSU9OUywge1xuICAgICAgICAgICAgcHJlc2V0czogICAgW3ByZXNldFN0YWdlMiwgcHJlc2V0RW52Rm9yVGVzdENvZGUsIHByZXNldFJlYWN0XSxcbiAgICAgICAgICAgIHBsdWdpbnM6ICAgIFt0cmFuc2Zvcm1SdW50aW1lLCBtb2R1bGVSZXNvbHZlciwgcHJvcG9zYWxQcml2YXRlTWV0aG9kcywgcHJvcG9zYWxDbGFzc1Byb3BlcnRpZXNdLFxuICAgICAgICAgICAgc291cmNlTWFwczogJ2lubGluZScsXG4gICAgICAgICAgICBmaWxlbmFtZSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGlzRmxvd0NvZGUoY29kZSkpXG4gICAgICAgICAgICBvcHRzLnByZXNldHMucHVzaChwcmVzZXRGbG93KTtcblxuICAgICAgICByZXR1cm4gb3B0cztcbiAgICB9XG5cbiAgICBfY29tcGlsZUNvZGUgKGNvZGUsIGZpbGVuYW1lKSB7XG4gICAgICAgIGNvbnN0IHsgYmFiZWwgfSA9IGxvYWRCYWJlbExpYnModGhpcyk7XG5cbiAgICAgICAgaWYgKHRoaXMuY2FjaGVbZmlsZW5hbWVdKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVbZmlsZW5hbWVdO1xuXG4gICAgICAgIGlmICh0aGlzLmlzQ29tcGlsZXJTZXJ2aWNlTW9kZSB8fCB0aGlzLmV4cGVyaW1lbnRhbEVzbSlcbiAgICAgICAgICAgIGNvZGUgKz0gRElTQUJMRV9WOF9PUFRJTUlaQVRJT05fQ09ERTtcblxuICAgICAgICBjb25zdCBvcHRzICAgICA9IEVTTmV4dFRlc3RGaWxlQ29tcGlsZXIuZ2V0QmFiZWxPcHRpb25zKGZpbGVuYW1lLCBjb2RlLCB0aGlzKTtcbiAgICAgICAgY29uc3QgY29tcGlsZWQgPSBiYWJlbC50cmFuc2Zvcm0oY29kZSwgb3B0cyk7XG5cbiAgICAgICAgdGhpcy5jYWNoZVtmaWxlbmFtZV0gPSBjb21waWxlZC5jb2RlO1xuXG4gICAgICAgIHJldHVybiBjb21waWxlZC5jb2RlO1xuICAgIH1cblxuICAgIF9nZXRSZXF1aXJlQ29tcGlsZXJzICgpIHtcbiAgICAgICAgY29uc3QgcmVxdWlyZUNvbXBpbGVycyA9IHtcbiAgICAgICAgICAgIFtFeHRlbnNpb25zLmpzXTogIChjb2RlLCBmaWxlbmFtZSkgPT4gdGhpcy5fY29tcGlsZUNvZGUoY29kZSwgZmlsZW5hbWUpLFxuICAgICAgICAgICAgW0V4dGVuc2lvbnMuanN4XTogKGNvZGUsIGZpbGVuYW1lKSA9PiB0aGlzLl9jb21waWxlQ29kZShjb2RlLCBmaWxlbmFtZSksXG4gICAgICAgICAgICBbRXh0ZW5zaW9ucy5janNdOiAoY29kZSwgZmlsZW5hbWUpID0+IHRoaXMuX2NvbXBpbGVDb2RlKGNvZGUsIGZpbGVuYW1lKSxcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodGhpcy5leHBlcmltZW50YWxFc20pXG4gICAgICAgICAgICByZXF1aXJlQ29tcGlsZXJzW0V4dGVuc2lvbnMubWpzXSA9IChjb2RlLCBmaWxlbmFtZSkgPT4gdGhpcy5fY29tcGlsZUNvZGUoY29kZSwgZmlsZW5hbWUpO1xuXG4gICAgICAgIHJldHVybiByZXF1aXJlQ29tcGlsZXJzO1xuICAgIH1cblxuICAgIGdldCBjYW5Db21waWxlSW5Fc20gKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBnZXRTdXBwb3J0ZWRFeHRlbnNpb24gKCkge1xuICAgICAgICBjb25zdCBzdXBwb3J0ZWRFeHRlbnNpb25zID0gW0V4dGVuc2lvbnMuanMsIEV4dGVuc2lvbnMuanN4LCBFeHRlbnNpb25zLmNqcywgRXh0ZW5zaW9ucy5tanNdO1xuXG4gICAgICAgIHJldHVybiBzdXBwb3J0ZWRFeHRlbnNpb25zO1xuICAgIH1cbn1cbiJdfQ==