"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSkipJsErrorsOptions = exports.validateSkipJsErrorsOptionValue = void 0;
const base_1 = __importDefault(require("./base"));
const skip_js_errors_option_names_1 = require("../../configuration/skip-js-errors-option-names");
const types_1 = require("../../errors/types");
const runtime_1 = require("../../errors/runtime");
const skip_js_errors_1 = require("../../api/skip-js-errors");
function validateSkipJsErrorsOptionValue(options, ErrorCtor) {
    if ((0, skip_js_errors_1.isSkipJsErrorsCallbackWithOptionsObject)(options))
        validateSkipJsErrorsCallbackWithOptionsObject(options, ErrorCtor);
    else if ((0, skip_js_errors_1.isSkipJsErrorsOptionsObject)(options))
        validateSkipJsErrorsOptionsObject(options, ErrorCtor);
    return void 0;
}
exports.validateSkipJsErrorsOptionValue = validateSkipJsErrorsOptionValue;
async function getSkipJsErrorsOptions(optionName, options) {
    if (typeof options === 'boolean')
        return options;
    const parsedOptions = await (0, base_1.default)(options, {
        async onOptionParsed(key, value) {
            if (!key || !value)
                throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.optionValueIsNotValidKeyValue, optionName);
            return value;
        },
    });
    validateSkipJsErrorsOptionsObject(parsedOptions, runtime_1.GeneralError);
    return parsedOptions;
}
exports.getSkipJsErrorsOptions = getSkipJsErrorsOptions;
function _isSkipJsErrorsOptionsObjectOption(option) {
    return Object.values(skip_js_errors_option_names_1.SKIP_JS_ERRORS_OPTIONS_OBJECT_OPTION_NAMES).includes(option);
}
function _isSkipJsErrorsCallbackWithOptionsOption(option) {
    return Object.values(skip_js_errors_option_names_1.SKIP_JS_ERRORS_CALLBACK_WITH_OPTIONS_OPTION_NAMES).includes(option);
}
function validateSkipJsErrorsOptionsObject(options, ErrorCtor) {
    for (const key in options) {
        if (!_isSkipJsErrorsOptionsObjectOption(key))
            throw new ErrorCtor(types_1.RUNTIME_ERRORS.invalidSkipJsErrorsOptionsObjectProperty, key);
    }
}
function validateSkipJsErrorsCallbackWithOptionsObject(options, ErrorCtor) {
    for (const key in options) {
        if (!_isSkipJsErrorsCallbackWithOptionsOption(key))
            throw new ErrorCtor(types_1.RUNTIME_ERRORS.invalidSkipJsErrorsCallbackWithOptionsProperty, key);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tpcC1qcy1lcnJvcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvZ2V0LW9wdGlvbnMvc2tpcC1qcy1lcnJvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsa0RBQW9DO0FBQ3BDLGlHQUFnSztBQUNoSyw4Q0FBb0Q7QUFDcEQsa0RBQW9EO0FBRXBELDZEQUFnSDtBQUVoSCxTQUFnQiwrQkFBK0IsQ0FBRSxPQUFpSSxFQUFFLFNBQWM7SUFDOUwsSUFBSSxJQUFBLHdEQUF1QyxFQUFDLE9BQU8sQ0FBQztRQUNoRCw2Q0FBNkMsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7U0FFakUsSUFBSSxJQUFBLDRDQUEyQixFQUFDLE9BQU8sQ0FBQztRQUN6QyxpQ0FBaUMsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFFMUQsT0FBTyxLQUFLLENBQUMsQ0FBQztBQUNsQixDQUFDO0FBUkQsMEVBUUM7QUFFTSxLQUFLLFVBQVUsc0JBQXNCLENBQUUsVUFBa0IsRUFBRSxPQUF1RDtJQUNySCxJQUFJLE9BQU8sT0FBTyxLQUFLLFNBQVM7UUFDNUIsT0FBTyxPQUFPLENBQUM7SUFFbkIsTUFBTSxhQUFhLEdBQUcsTUFBTSxJQUFBLGNBQWMsRUFBQyxPQUE2QixFQUFFO1FBQ3RFLEtBQUssQ0FBQyxjQUFjLENBQUUsR0FBVyxFQUFFLEtBQXNCO1lBQ3JELElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLO2dCQUNkLE1BQU0sSUFBSSxzQkFBWSxDQUFDLHNCQUFjLENBQUMsNkJBQTZCLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFFckYsT0FBTyxLQUFLLENBQUM7UUFDakIsQ0FBQztLQUNKLENBQUMsQ0FBQztJQUVILGlDQUFpQyxDQUFDLGFBQWEsRUFBRSxzQkFBWSxDQUFDLENBQUM7SUFFL0QsT0FBTyxhQUFhLENBQUM7QUFDekIsQ0FBQztBQWhCRCx3REFnQkM7QUFFRCxTQUFTLGtDQUFrQyxDQUFFLE1BQWM7SUFDdkQsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLHdFQUEwQyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQW9ELENBQUMsQ0FBQztBQUNwSSxDQUFDO0FBRUQsU0FBUyx3Q0FBd0MsQ0FBRSxNQUFjO0lBQzdELE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQywrRUFBaUQsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUEyRCxDQUFDLENBQUM7QUFDbEosQ0FBQztBQUVELFNBQVMsaUNBQWlDLENBQUUsT0FBd0QsRUFBRSxTQUFjO0lBQ2hILEtBQUssTUFBTSxHQUFHLElBQUksT0FBTyxFQUFFO1FBQ3ZCLElBQUksQ0FBQyxrQ0FBa0MsQ0FBQyxHQUFHLENBQUM7WUFDeEMsTUFBTSxJQUFJLFNBQVMsQ0FBQyxzQkFBYyxDQUFDLHdDQUF3QyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0tBQ3pGO0FBQ0wsQ0FBQztBQUVELFNBQVMsNkNBQTZDLENBQUUsT0FBb0UsRUFBRSxTQUFjO0lBQ3hJLEtBQUssTUFBTSxHQUFHLElBQUksT0FBTyxFQUFFO1FBQ3ZCLElBQUksQ0FBQyx3Q0FBd0MsQ0FBQyxHQUFHLENBQUM7WUFDOUMsTUFBTSxJQUFJLFNBQVMsQ0FBQyxzQkFBYyxDQUFDLDhDQUE4QyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0tBQy9GO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBiYXNlR2V0T3B0aW9ucyBmcm9tICcuL2Jhc2UnO1xuaW1wb3J0IHsgU0tJUF9KU19FUlJPUlNfQ0FMTEJBQ0tfV0lUSF9PUFRJT05TX09QVElPTl9OQU1FUywgU0tJUF9KU19FUlJPUlNfT1BUSU9OU19PQkpFQ1RfT1BUSU9OX05BTUVTIH0gZnJvbSAnLi4vLi4vY29uZmlndXJhdGlvbi9za2lwLWpzLWVycm9ycy1vcHRpb24tbmFtZXMnO1xuaW1wb3J0IHsgUlVOVElNRV9FUlJPUlMgfSBmcm9tICcuLi8uLi9lcnJvcnMvdHlwZXMnO1xuaW1wb3J0IHsgR2VuZXJhbEVycm9yIH0gZnJvbSAnLi4vLi4vZXJyb3JzL3J1bnRpbWUnO1xuaW1wb3J0IHsgRGljdGlvbmFyeSB9IGZyb20gJy4uLy4uL2NvbmZpZ3VyYXRpb24vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBpc1NraXBKc0Vycm9yc0NhbGxiYWNrV2l0aE9wdGlvbnNPYmplY3QsIGlzU2tpcEpzRXJyb3JzT3B0aW9uc09iamVjdCB9IGZyb20gJy4uLy4uL2FwaS9za2lwLWpzLWVycm9ycyc7XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVNraXBKc0Vycm9yc09wdGlvblZhbHVlIChvcHRpb25zOiBib29sZWFuIHwgRGljdGlvbmFyeTx1bmtub3duPiB8IFNraXBKc0Vycm9yc09wdGlvbnNPYmplY3QgfCBTa2lwSnNFcnJvcnNDYWxsYmFjayB8IFNraXBKc0Vycm9yc0NhbGxiYWNrV2l0aE9wdGlvbnNPYmplY3QsIEVycm9yQ3RvcjogYW55KTogdm9pZCB7XG4gICAgaWYgKGlzU2tpcEpzRXJyb3JzQ2FsbGJhY2tXaXRoT3B0aW9uc09iamVjdChvcHRpb25zKSlcbiAgICAgICAgdmFsaWRhdGVTa2lwSnNFcnJvcnNDYWxsYmFja1dpdGhPcHRpb25zT2JqZWN0KG9wdGlvbnMsIEVycm9yQ3Rvcik7XG5cbiAgICBlbHNlIGlmIChpc1NraXBKc0Vycm9yc09wdGlvbnNPYmplY3Qob3B0aW9ucykpXG4gICAgICAgIHZhbGlkYXRlU2tpcEpzRXJyb3JzT3B0aW9uc09iamVjdChvcHRpb25zLCBFcnJvckN0b3IpO1xuXG4gICAgcmV0dXJuIHZvaWQgMDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFNraXBKc0Vycm9yc09wdGlvbnMgKG9wdGlvbk5hbWU6IHN0cmluZywgb3B0aW9uczogc3RyaW5nIHwgYm9vbGVhbiB8IERpY3Rpb25hcnk8c3RyaW5nIHwgUmVnRXhwPik6IFByb21pc2U8RGljdGlvbmFyeTxSZWdFeHB8c3RyaW5nPiB8IGJvb2xlYW4+IHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdib29sZWFuJylcbiAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG5cbiAgICBjb25zdCBwYXJzZWRPcHRpb25zID0gYXdhaXQgYmFzZUdldE9wdGlvbnMob3B0aW9ucyBhcyBEaWN0aW9uYXJ5PHN0cmluZz4sIHtcbiAgICAgICAgYXN5bmMgb25PcHRpb25QYXJzZWQgKGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nIHwgUmVnRXhwKSB7XG4gICAgICAgICAgICBpZiAoIWtleSB8fCAhdmFsdWUpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEdlbmVyYWxFcnJvcihSVU5USU1FX0VSUk9SUy5vcHRpb25WYWx1ZUlzTm90VmFsaWRLZXlWYWx1ZSwgb3B0aW9uTmFtZSk7XG5cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHZhbGlkYXRlU2tpcEpzRXJyb3JzT3B0aW9uc09iamVjdChwYXJzZWRPcHRpb25zLCBHZW5lcmFsRXJyb3IpO1xuXG4gICAgcmV0dXJuIHBhcnNlZE9wdGlvbnM7XG59XG5cbmZ1bmN0aW9uIF9pc1NraXBKc0Vycm9yc09wdGlvbnNPYmplY3RPcHRpb24gKG9wdGlvbjogc3RyaW5nKTogb3B0aW9uIGlzIFNLSVBfSlNfRVJST1JTX09QVElPTlNfT0JKRUNUX09QVElPTl9OQU1FUyB7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXMoU0tJUF9KU19FUlJPUlNfT1BUSU9OU19PQkpFQ1RfT1BUSU9OX05BTUVTKS5pbmNsdWRlcyhvcHRpb24gYXMgU0tJUF9KU19FUlJPUlNfT1BUSU9OU19PQkpFQ1RfT1BUSU9OX05BTUVTKTtcbn1cblxuZnVuY3Rpb24gX2lzU2tpcEpzRXJyb3JzQ2FsbGJhY2tXaXRoT3B0aW9uc09wdGlvbiAob3B0aW9uOiBzdHJpbmcpOiBvcHRpb24gaXMgU0tJUF9KU19FUlJPUlNfQ0FMTEJBQ0tfV0lUSF9PUFRJT05TX09QVElPTl9OQU1FUyB7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXMoU0tJUF9KU19FUlJPUlNfQ0FMTEJBQ0tfV0lUSF9PUFRJT05TX09QVElPTl9OQU1FUykuaW5jbHVkZXMob3B0aW9uIGFzIFNLSVBfSlNfRVJST1JTX0NBTExCQUNLX1dJVEhfT1BUSU9OU19PUFRJT05fTkFNRVMpO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVNraXBKc0Vycm9yc09wdGlvbnNPYmplY3QgKG9wdGlvbnM6IERpY3Rpb25hcnk8dW5rbm93bj4gfCBTa2lwSnNFcnJvcnNPcHRpb25zT2JqZWN0LCBFcnJvckN0b3I6IGFueSk6IHZvaWQge1xuICAgIGZvciAoY29uc3Qga2V5IGluIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFfaXNTa2lwSnNFcnJvcnNPcHRpb25zT2JqZWN0T3B0aW9uKGtleSkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JDdG9yKFJVTlRJTUVfRVJST1JTLmludmFsaWRTa2lwSnNFcnJvcnNPcHRpb25zT2JqZWN0UHJvcGVydHksIGtleSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVNraXBKc0Vycm9yc0NhbGxiYWNrV2l0aE9wdGlvbnNPYmplY3QgKG9wdGlvbnM6IERpY3Rpb25hcnk8dW5rbm93bj4gfCBTa2lwSnNFcnJvcnNDYWxsYmFja1dpdGhPcHRpb25zT2JqZWN0LCBFcnJvckN0b3I6IGFueSk6IHZvaWQge1xuICAgIGZvciAoY29uc3Qga2V5IGluIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFfaXNTa2lwSnNFcnJvcnNDYWxsYmFja1dpdGhPcHRpb25zT3B0aW9uKGtleSkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JDdG9yKFJVTlRJTUVfRVJST1JTLmludmFsaWRTa2lwSnNFcnJvcnNDYWxsYmFja1dpdGhPcHRpb25zUHJvcGVydHksIGtleSk7XG4gICAgfVxufVxuIl19