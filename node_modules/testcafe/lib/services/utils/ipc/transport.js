"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceTransport = exports.HostTransport = void 0;
const io_1 = require("./io");
const async_event_emitter_1 = __importDefault(require("../../../utils/async-event-emitter"));
const runtime_1 = require("../../../errors/runtime");
const types_1 = require("../../../errors/types");
const interfaces_1 = require("./interfaces");
class HostTransport extends async_event_emitter_1.default {
    constructor(inputStream, outputStream, syncStream) {
        super();
        this.asyncReader = new io_1.AsyncReader(inputStream);
        this.asyncWriter = new io_1.AsyncWriter(outputStream);
        this.syncReader = new io_1.AsyncReader(syncStream);
        this.syncWriter = new io_1.AsyncWriter(syncStream);
        this.readers = [this.asyncReader, this.syncReader];
    }
    read() {
        this.readers.forEach(reader => {
            reader.on('data', data => this.emit('data', data));
            reader.read();
        });
    }
    async write(message) {
        const writer = message.sync ? this.syncWriter : this.asyncWriter;
        await writer.write(message);
    }
    readSync() {
        throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.methodIsNotAvailableForAnIPCHost);
    }
    writeSync() {
        throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.methodIsNotAvailableForAnIPCHost);
    }
}
exports.HostTransport = HostTransport;
class ServiceTransport extends async_event_emitter_1.default {
    constructor(inputStream, outputStream, syncFd) {
        super();
        this.asyncReader = new io_1.AsyncReader(inputStream);
        this.asyncWriter = new io_1.AsyncWriter(outputStream);
        this.syncReader = new io_1.SyncReader(syncFd);
        this.syncWriter = new io_1.SyncWriter(syncFd);
    }
    read() {
        this.asyncReader.on('data', data => this.emit('data', data));
        this.asyncReader.read();
    }
    async write(message) {
        await this.asyncWriter.write(message);
    }
    readSync() {
        const message = this.syncReader.readSync();
        if (!(0, interfaces_1.isIPCResponsePacket)(message))
            throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.malformedIPCMessage);
        return message;
    }
    writeSync(message) {
        this.syncWriter.writeSync(message);
    }
}
exports.ServiceTransport = ServiceTransport;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNwb3J0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3NlcnZpY2VzL3V0aWxzL2lwYy90cmFuc3BvcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsNkJBS2M7QUFFZCw2RkFBOEQ7QUFDOUQscURBQXVEO0FBQ3ZELGlEQUF1RDtBQUN2RCw2Q0FLc0I7QUFHdEIsTUFBYSxhQUFjLFNBQVEsNkJBQVk7SUFRM0MsWUFBb0IsV0FBa0MsRUFBRSxZQUFtQyxFQUFFLFVBQXlEO1FBQ2xKLEtBQUssRUFBRSxDQUFDO1FBRVIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLGdCQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLGdCQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFakQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLGdCQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDOUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLGdCQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFOUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFTSxJQUFJO1FBQ1AsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDMUIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ25ELE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNsQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTSxLQUFLLENBQUMsS0FBSyxDQUFFLE9BQWtCO1FBQ2xDLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7UUFFakUsTUFBTSxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFTSxRQUFRO1FBQ1gsTUFBTSxJQUFJLHNCQUFZLENBQUMsc0JBQWMsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFFTSxTQUFTO1FBQ1osTUFBTSxJQUFJLHNCQUFZLENBQUMsc0JBQWMsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0lBQzVFLENBQUM7Q0FDSjtBQXhDRCxzQ0F3Q0M7QUFHRCxNQUFhLGdCQUFpQixTQUFRLDZCQUFZO0lBTTlDLFlBQW9CLFdBQWtDLEVBQUUsWUFBbUMsRUFBRSxNQUFjO1FBQ3ZHLEtBQUssRUFBRSxDQUFDO1FBRVIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLGdCQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLGdCQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFakQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLGVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksZUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFTSxJQUFJO1FBQ1AsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUM3RCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFTSxLQUFLLENBQUMsS0FBSyxDQUFFLE9BQWtCO1FBQ2xDLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVNLFFBQVE7UUFDWCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRTNDLElBQUksQ0FBQyxJQUFBLGdDQUFtQixFQUFDLE9BQU8sQ0FBQztZQUM3QixNQUFNLElBQUksc0JBQVksQ0FBQyxzQkFBYyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFFL0QsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztJQUVNLFNBQVMsQ0FBRSxPQUFrQjtRQUNoQyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN2QyxDQUFDO0NBQ0o7QUFyQ0QsNENBcUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBBc3luY1JlYWRlcixcbiAgICBBc3luY1dyaXRlcixcbiAgICBTeW5jUmVhZGVyLFxuICAgIFN5bmNXcml0ZXIsXG59IGZyb20gJy4vaW8nO1xuXG5pbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJy4uLy4uLy4uL3V0aWxzL2FzeW5jLWV2ZW50LWVtaXR0ZXInO1xuaW1wb3J0IHsgR2VuZXJhbEVycm9yIH0gZnJvbSAnLi4vLi4vLi4vZXJyb3JzL3J1bnRpbWUnO1xuaW1wb3J0IHsgUlVOVElNRV9FUlJPUlMgfSBmcm9tICcuLi8uLi8uLi9lcnJvcnMvdHlwZXMnO1xuaW1wb3J0IHtcbiAgICBJUENQYWNrZXQsXG4gICAgSVBDUmVzcG9uc2VQYWNrZXQsXG4gICAgSVBDVHJhbnNwb3J0LFxuICAgIGlzSVBDUmVzcG9uc2VQYWNrZXQsXG59IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5cblxuZXhwb3J0IGNsYXNzIEhvc3RUcmFuc3BvcnQgZXh0ZW5kcyBFdmVudEVtaXR0ZXIgaW1wbGVtZW50cyBJUENUcmFuc3BvcnQge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgYXN5bmNSZWFkZXI6IEFzeW5jUmVhZGVyO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgYXN5bmNXcml0ZXI6IEFzeW5jV3JpdGVyO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgc3luY1JlYWRlcjogQXN5bmNSZWFkZXI7XG4gICAgcHJpdmF0ZSByZWFkb25seSBzeW5jV3JpdGVyOiBBc3luY1dyaXRlcjtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgcmVhZGVyczogQXN5bmNSZWFkZXJbXTtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvciAoaW5wdXRTdHJlYW06IE5vZGVKUy5SZWFkYWJsZVN0cmVhbSwgb3V0cHV0U3RyZWFtOiBOb2RlSlMuV3JpdGFibGVTdHJlYW0sIHN5bmNTdHJlYW06IE5vZGVKUy5SZWFkYWJsZVN0cmVhbSAmIE5vZGVKUy5Xcml0YWJsZVN0cmVhbSkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuYXN5bmNSZWFkZXIgPSBuZXcgQXN5bmNSZWFkZXIoaW5wdXRTdHJlYW0pO1xuICAgICAgICB0aGlzLmFzeW5jV3JpdGVyID0gbmV3IEFzeW5jV3JpdGVyKG91dHB1dFN0cmVhbSk7XG5cbiAgICAgICAgdGhpcy5zeW5jUmVhZGVyID0gbmV3IEFzeW5jUmVhZGVyKHN5bmNTdHJlYW0pO1xuICAgICAgICB0aGlzLnN5bmNXcml0ZXIgPSBuZXcgQXN5bmNXcml0ZXIoc3luY1N0cmVhbSk7XG5cbiAgICAgICAgdGhpcy5yZWFkZXJzID0gW3RoaXMuYXN5bmNSZWFkZXIsIHRoaXMuc3luY1JlYWRlcl07XG4gICAgfVxuXG4gICAgcHVibGljIHJlYWQgKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlYWRlcnMuZm9yRWFjaChyZWFkZXIgPT4ge1xuICAgICAgICAgICAgcmVhZGVyLm9uKCdkYXRhJywgZGF0YSA9PiB0aGlzLmVtaXQoJ2RhdGEnLCBkYXRhKSk7XG4gICAgICAgICAgICByZWFkZXIucmVhZCgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgd3JpdGUgKG1lc3NhZ2U6IElQQ1BhY2tldCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCB3cml0ZXIgPSBtZXNzYWdlLnN5bmMgPyB0aGlzLnN5bmNXcml0ZXIgOiB0aGlzLmFzeW5jV3JpdGVyO1xuXG4gICAgICAgIGF3YWl0IHdyaXRlci53cml0ZShtZXNzYWdlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVhZFN5bmMgKCk6IG5ldmVyIHtcbiAgICAgICAgdGhyb3cgbmV3IEdlbmVyYWxFcnJvcihSVU5USU1FX0VSUk9SUy5tZXRob2RJc05vdEF2YWlsYWJsZUZvckFuSVBDSG9zdCk7XG4gICAgfVxuXG4gICAgcHVibGljIHdyaXRlU3luYyAoKTogbmV2ZXIge1xuICAgICAgICB0aHJvdyBuZXcgR2VuZXJhbEVycm9yKFJVTlRJTUVfRVJST1JTLm1ldGhvZElzTm90QXZhaWxhYmxlRm9yQW5JUENIb3N0KTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGNsYXNzIFNlcnZpY2VUcmFuc3BvcnQgZXh0ZW5kcyBFdmVudEVtaXR0ZXIgaW1wbGVtZW50cyBJUENUcmFuc3BvcnQge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgYXN5bmNSZWFkZXI6IEFzeW5jUmVhZGVyO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgYXN5bmNXcml0ZXI6IEFzeW5jV3JpdGVyO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgc3luY1JlYWRlcjogU3luY1JlYWRlcjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHN5bmNXcml0ZXI6IFN5bmNXcml0ZXI7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IgKGlucHV0U3RyZWFtOiBOb2RlSlMuUmVhZGFibGVTdHJlYW0sIG91dHB1dFN0cmVhbTogTm9kZUpTLldyaXRhYmxlU3RyZWFtLCBzeW5jRmQ6IG51bWJlcikge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuYXN5bmNSZWFkZXIgPSBuZXcgQXN5bmNSZWFkZXIoaW5wdXRTdHJlYW0pO1xuICAgICAgICB0aGlzLmFzeW5jV3JpdGVyID0gbmV3IEFzeW5jV3JpdGVyKG91dHB1dFN0cmVhbSk7XG5cbiAgICAgICAgdGhpcy5zeW5jUmVhZGVyID0gbmV3IFN5bmNSZWFkZXIoc3luY0ZkKTtcbiAgICAgICAgdGhpcy5zeW5jV3JpdGVyID0gbmV3IFN5bmNXcml0ZXIoc3luY0ZkKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVhZCAoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYXN5bmNSZWFkZXIub24oJ2RhdGEnLCBkYXRhID0+IHRoaXMuZW1pdCgnZGF0YScsIGRhdGEpKTtcbiAgICAgICAgdGhpcy5hc3luY1JlYWRlci5yZWFkKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIHdyaXRlIChtZXNzYWdlOiBJUENQYWNrZXQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5hc3luY1dyaXRlci53cml0ZShtZXNzYWdlKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVhZFN5bmMgKCk6IElQQ1Jlc3BvbnNlUGFja2V0IHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IHRoaXMuc3luY1JlYWRlci5yZWFkU3luYygpO1xuXG4gICAgICAgIGlmICghaXNJUENSZXNwb25zZVBhY2tldChtZXNzYWdlKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBHZW5lcmFsRXJyb3IoUlVOVElNRV9FUlJPUlMubWFsZm9ybWVkSVBDTWVzc2FnZSk7XG5cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuXG4gICAgcHVibGljIHdyaXRlU3luYyAobWVzc2FnZTogSVBDUGFja2V0KTogdm9pZCB7XG4gICAgICAgIHRoaXMuc3luY1dyaXRlci53cml0ZVN5bmMobWVzc2FnZSk7XG4gICAgfVxufVxuIl19