"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageSerializer = exports.MessageParser = void 0;
const packet_1 = __importDefault(require("./packet"));
const runtime_1 = require("../../../errors/runtime");
const types_1 = require("../../../errors/types");
const create_replicator_1 = __importDefault(require("../../serialization/replicator/create-replicator"));
const replicator = (0, create_replicator_1.default)();
class MessageParser {
    constructor() {
        this.dataQueue = [];
        this.packetQueue = [];
    }
    static _concatPackets(packets) {
        const data = packets.map(packet => packet.data);
        return Buffer.concat(data);
    }
    _processPacket(packet) {
        if (packet.header.tail) {
            if (!packet.header.head && this.packetQueue.length === 0)
                throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.unexpectedIPCTailPacket);
            const packets = this.packetQueue.splice(0, this.packetQueue.length);
            const data = packet.header.head ? packet.data : MessageParser._concatPackets([...packets, packet]);
            const stringified = data.toString();
            try {
                return replicator.decode(stringified);
            }
            catch (e) {
                if (e instanceof Error)
                    e.message += `\n${stringified}\n`;
                throw e;
            }
        }
        if (packet.header.head && this.packetQueue.length !== 0) {
            this.packetQueue.splice(0, this.packetQueue.length);
            throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.unexpectedIPCHeadPacket);
        }
        if (!packet.header.head && !packet.header.tail && this.packetQueue.length === 0)
            throw new runtime_1.GeneralError(types_1.RUNTIME_ERRORS.unexpectedIPCBodyPacket);
        this.packetQueue.push(packet);
        return void 0;
    }
    _processData() {
        let buffer = Buffer.concat(this.dataQueue.splice(0, this.dataQueue.length));
        let packet = packet_1.default.parse(buffer);
        const messages = [];
        while (packet) {
            const message = this._processPacket(packet);
            if (message)
                messages.push(message);
            buffer = buffer.slice(packet.header.totalSize);
            packet = packet_1.default.parse(buffer);
        }
        if (buffer.length)
            this.dataQueue.unshift(buffer);
        return messages;
    }
    parse(data) {
        this.dataQueue.push(data);
        return this._processData();
    }
}
exports.MessageParser = MessageParser;
class MessageSerializer {
    static _chunkData(data) {
        const chunks = [];
        for (let index = 0; index < data.length; index += packet_1.default.MAX_PAYLOAD_SIZE) {
            const size = Math.min(data.length - index, packet_1.default.MAX_PAYLOAD_SIZE);
            const head = index === 0;
            const tail = index + size >= data.length;
            chunks.push(packet_1.default.serialize(data.slice(index, index + size), { head, tail }));
        }
        return chunks;
    }
    serialize(message) {
        const encodedMessage = replicator.encode(message);
        return MessageSerializer._chunkData(Buffer.from(encodedMessage));
    }
}
exports.MessageSerializer = MessageSerializer;
//# sourceMappingURL=data:application/json;base64,