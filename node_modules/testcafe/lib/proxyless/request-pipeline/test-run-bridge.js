"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const connection_1 = __importDefault(require("../../browser/connection"));
class TestRunBridge {
    constructor(browserId) {
        this._browserId = browserId;
    }
    getBrowserConnection() {
        return connection_1.default.getById(this._browserId);
    }
    getCurrentTestRun() {
        const browserConnection = this.getBrowserConnection();
        return browserConnection.getCurrentTestRun();
    }
    getSessionId() {
        var _a;
        return ((_a = this.getCurrentTestRun()) === null || _a === void 0 ? void 0 : _a.id) || '';
    }
    getUserScripts() {
        const currentTestRun = this.getCurrentTestRun();
        if (!currentTestRun)
            return [];
        return currentTestRun.injectable.userScripts;
    }
    async getTaskScript({ isIframe }) {
        const browserConnection = this.getBrowserConnection();
        const proxy = browserConnection.browserConnectionGateway.proxy;
        const windowId = browserConnection.activeWindowId;
        // @ts-ignore
        return await this.getCurrentTestRun().session.getTaskScript({
            referer: '',
            cookieUrl: '',
            withPayload: true,
            serverInfo: proxy.server1Info,
            windowId,
            isIframe,
        });
    }
}
exports.default = TestRunBridge;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC1ydW4tYnJpZGdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Byb3h5bGVzcy9yZXF1ZXN0LXBpcGVsaW5lL3Rlc3QtcnVuLWJyaWRnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLDBFQUF5RDtBQUl6RCxNQUFxQixhQUFhO0lBRTlCLFlBQW9CLFNBQWlCO1FBQ2pDLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO0lBQ2hDLENBQUM7SUFFTSxvQkFBb0I7UUFDdkIsT0FBTyxvQkFBaUIsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBc0IsQ0FBQztJQUMzRSxDQUFDO0lBRU0saUJBQWlCO1FBQ3BCLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFFdEQsT0FBTyxpQkFBaUIsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQ2pELENBQUM7SUFFTSxZQUFZOztRQUNmLE9BQU8sQ0FBQSxNQUFBLElBQUksQ0FBQyxpQkFBaUIsRUFBRSwwQ0FBRSxFQUFFLEtBQUksRUFBRSxDQUFDO0lBQzlDLENBQUM7SUFFTSxjQUFjO1FBQ2pCLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBRWhELElBQUksQ0FBQyxjQUFjO1lBQ2YsT0FBTyxFQUFFLENBQUM7UUFFZCxPQUFPLGNBQWMsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDO0lBQ2pELENBQUM7SUFFTSxLQUFLLENBQUMsYUFBYSxDQUFFLEVBQUUsUUFBUSxFQUE4QjtRQUNoRSxNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1FBQ3RELE1BQU0sS0FBSyxHQUFlLGlCQUFpQixDQUFDLHdCQUF3QixDQUFDLEtBQUssQ0FBQztRQUMzRSxNQUFNLFFBQVEsR0FBWSxpQkFBaUIsQ0FBQyxjQUFjLENBQUM7UUFFM0QsYUFBYTtRQUNiLE9BQU8sTUFBTSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO1lBQ3hELE9BQU8sRUFBTSxFQUFFO1lBQ2YsU0FBUyxFQUFJLEVBQUU7WUFDZixXQUFXLEVBQUUsSUFBSTtZQUNqQixVQUFVLEVBQUcsS0FBSyxDQUFDLFdBQVc7WUFDOUIsUUFBUTtZQUNSLFFBQVE7U0FDWCxDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0o7QUE1Q0QsZ0NBNENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlc3RSdW4gZnJvbSAnLi4vLi4vdGVzdC1ydW4nO1xuaW1wb3J0IEJyb3dzZXJDb25uZWN0aW9uIGZyb20gJy4uLy4uL2Jyb3dzZXIvY29ubmVjdGlvbic7XG5pbXBvcnQgeyBVc2VyU2NyaXB0IH0gZnJvbSAndGVzdGNhZmUtaGFtbWVyaGVhZCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlUmVzb3VyY2VzT3B0aW9ucyB9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGVzdFJ1bkJyaWRnZSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfYnJvd3NlcklkOiBzdHJpbmc7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yIChicm93c2VySWQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9icm93c2VySWQgPSBicm93c2VySWQ7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEJyb3dzZXJDb25uZWN0aW9uICgpOiBCcm93c2VyQ29ubmVjdGlvbiB7XG4gICAgICAgIHJldHVybiBCcm93c2VyQ29ubmVjdGlvbi5nZXRCeUlkKHRoaXMuX2Jyb3dzZXJJZCkgYXMgQnJvd3NlckNvbm5lY3Rpb247XG4gICAgfVxuXG4gICAgcHVibGljIGdldEN1cnJlbnRUZXN0UnVuICgpOiBUZXN0UnVuIHtcbiAgICAgICAgY29uc3QgYnJvd3NlckNvbm5lY3Rpb24gPSB0aGlzLmdldEJyb3dzZXJDb25uZWN0aW9uKCk7XG5cbiAgICAgICAgcmV0dXJuIGJyb3dzZXJDb25uZWN0aW9uLmdldEN1cnJlbnRUZXN0UnVuKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFNlc3Npb25JZCAoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudFRlc3RSdW4oKT8uaWQgfHwgJyc7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFVzZXJTY3JpcHRzICgpOiBVc2VyU2NyaXB0W10ge1xuICAgICAgICBjb25zdCBjdXJyZW50VGVzdFJ1biA9IHRoaXMuZ2V0Q3VycmVudFRlc3RSdW4oKTtcblxuICAgICAgICBpZiAoIWN1cnJlbnRUZXN0UnVuKVxuICAgICAgICAgICAgcmV0dXJuIFtdO1xuXG4gICAgICAgIHJldHVybiBjdXJyZW50VGVzdFJ1bi5pbmplY3RhYmxlLnVzZXJTY3JpcHRzO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBnZXRUYXNrU2NyaXB0ICh7IGlzSWZyYW1lIH06IEluamVjdGFibGVSZXNvdXJjZXNPcHRpb25zKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgYnJvd3NlckNvbm5lY3Rpb24gPSB0aGlzLmdldEJyb3dzZXJDb25uZWN0aW9uKCk7XG4gICAgICAgIGNvbnN0IHByb3h5ICAgICAgICAgICAgID0gYnJvd3NlckNvbm5lY3Rpb24uYnJvd3NlckNvbm5lY3Rpb25HYXRld2F5LnByb3h5O1xuICAgICAgICBjb25zdCB3aW5kb3dJZCAgICAgICAgICA9IGJyb3dzZXJDb25uZWN0aW9uLmFjdGl2ZVdpbmRvd0lkO1xuXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0Q3VycmVudFRlc3RSdW4oKS5zZXNzaW9uLmdldFRhc2tTY3JpcHQoe1xuICAgICAgICAgICAgcmVmZXJlcjogICAgICcnLFxuICAgICAgICAgICAgY29va2llVXJsOiAgICcnLFxuICAgICAgICAgICAgd2l0aFBheWxvYWQ6IHRydWUsXG4gICAgICAgICAgICBzZXJ2ZXJJbmZvOiAgcHJveHkuc2VydmVyMUluZm8sXG4gICAgICAgICAgICB3aW5kb3dJZCxcbiAgICAgICAgICAgIGlzSWZyYW1lLFxuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=