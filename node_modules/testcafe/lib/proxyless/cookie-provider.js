"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdpCookieProvider = void 0;
const url_1 = require("url");
const base_1 = require("../test-run/cookies/base");
const match_collection_1 = __importDefault(require("../utils/match-collection"));
const get_active_client_1 = require("./utils/get-active-client");
const set_cookie_parser_1 = require("set-cookie-parser");
const lodash_1 = require("lodash");
const MAX_TIMESTAMP = 8640000000000000;
class CdpCookieProvider extends base_1.CookieProviderBase {
    async _getCdpClient() {
        const browserConnection = this.testRun.browserConnection;
        return (0, get_active_client_1.getActiveClient)(browserConnection);
    }
    async initialize() {
        return this.deleteCookies();
    }
    async getCookies(externalCookies) {
        const client = await this._getCdpClient();
        const { cookies } = await client.Storage.getCookies({});
        return (0, match_collection_1.default)(cookies, externalCookies).map(this._cdpCookieToExternalCookie);
    }
    async setCookies(cookies, url) {
        const client = await this._getCdpClient();
        const { hostname = '', pathname = '/' } = url ? new url_1.URL(url) : {};
        const cookiesArray = (0, lodash_1.castArray)(cookies);
        const parsedCookies = this._isCookieOptionsArray(cookiesArray)
            ? cookiesArray
            : this._parseSetCookieStrings(cookiesArray);
        await client.Network.setCookies({
            cookies: parsedCookies.map(cookie => this._cookieOptionToCdpCookieParam(cookie, hostname, pathname)),
        });
    }
    async deleteCookies(cookies = [], urls = []) {
        const client = await this._getCdpClient();
        if (!cookies || !cookies.length)
            return client.Network.clearBrowserCookies();
        const parsedUrls = this._parseUrls(urls);
        let existingCookies = await this.getCookies([]);
        if (parsedUrls.length) {
            existingCookies = existingCookies.filter(cookie => parsedUrls
                .find(url => url.domain === cookie.domain && url.path === cookie.path));
        }
        existingCookies = (0, match_collection_1.default)(existingCookies, cookies);
        for (const cookie of existingCookies) {
            await client.Network.deleteCookies({
                name: cookie.name || '',
                domain: cookie.domain,
                path: cookie.path,
            });
        }
        return void 0;
    }
    async getCookieHeader(url) {
        const [{ domain, path }] = this._parseUrls([url]);
        const cookies = await this.getCookies([{ domain }]);
        const filteredCookies = cookies.filter(c => this._includesPath(c.path || '/', path));
        return filteredCookies.map(c => `${c.name}=${c.value}`).join(';');
    }
    _cdpCookieToExternalCookie(cookie) {
        var _a;
        return {
            name: cookie.name,
            value: cookie.value,
            domain: cookie.domain,
            maxAge: void 0,
            path: cookie.path,
            expires: void 0,
            secure: cookie.secure,
            httpOnly: cookie.httpOnly,
            sameSite: (_a = cookie.sameSite) !== null && _a !== void 0 ? _a : 'none',
        };
    }
    _cookieOptionToCdpCookieParam(cookie, hostname, pathname) {
        var _a, _b, _c;
        return {
            name: cookie.name,
            value: cookie.value,
            domain: (_a = cookie.domain) !== null && _a !== void 0 ? _a : hostname,
            path: (_b = cookie.path) !== null && _b !== void 0 ? _b : pathname,
            secure: cookie.secure,
            httpOnly: false,
            sameSite: cookie.sameSite,
            expires: ((_c = cookie.expires) === null || _c === void 0 ? void 0 : _c.getTime()) || MAX_TIMESTAMP,
        };
    }
    _parseUrls(urls) {
        return urls.map(url => {
            const { hostname, pathname } = new url_1.URL(url);
            return { domain: hostname, path: pathname };
        });
    }
    _includesPath(cookiePath, urlPath) {
        if (cookiePath === '/')
            return true;
        const cookieParts = cookiePath.split('/');
        const urlParts = urlPath.split('/');
        if (cookieParts.length > urlParts.length)
            return false;
        while (cookieParts.length) {
            if (cookieParts.shift() !== urlParts.shift())
                return false;
        }
        return true;
    }
    _parseSetCookieStrings(cookies) {
        return (0, set_cookie_parser_1.parse)(cookies);
    }
}
exports.CdpCookieProvider = CdpCookieProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Byb3h5bGVzcy9jb29raWUtcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBSUEsNkJBQTBCO0FBRTFCLG1EQUE4RTtBQUU5RSxpRkFBd0Q7QUFDeEQsaUVBQTREO0FBQzVELHlEQUEwQztBQUMxQyxtQ0FBbUM7QUFJbkMsTUFBTSxhQUFhLEdBQUcsZ0JBQWdCLENBQUM7QUFFdkMsTUFBYSxpQkFBa0IsU0FBUSx5QkFBa0I7SUFDN0MsS0FBSyxDQUFDLGFBQWE7UUFDdkIsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDO1FBRXpELE9BQU8sSUFBQSxtQ0FBZSxFQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELEtBQUssQ0FBQyxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUVELEtBQUssQ0FBQyxVQUFVLENBQUUsZUFBa0M7UUFDaEQsTUFBTSxNQUFNLEdBQVEsTUFBTSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDL0MsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLE1BQU0sTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFeEQsT0FBUSxJQUFBLDBCQUFlLEVBQUMsT0FBTyxFQUFFLGVBQWUsQ0FBYyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsQ0FBQztJQUN4RyxDQUFDO0lBRUQsS0FBSyxDQUFDLFVBQVUsQ0FBRSxPQUE0QyxFQUFFLEdBQVc7UUFDdkUsTUFBTSxNQUFNLEdBQThCLE1BQU0sSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3JFLE1BQU0sRUFBRSxRQUFRLEdBQUcsRUFBRSxFQUFFLFFBQVEsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLENB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LENBQUUsVUFBa0IsRUFBRSxPQUFlO1FBQ3RELElBQUksVUFBVSxLQUFLLEdBQUc7WUFDbEIsT0FBTyxJQUFJLENBQUM7UUFFaEIsTUFBTSxXQUFXLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMxQyxNQUFNLFFBQVEsR0FBTSxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXZDLElBQUksV0FBVyxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsTUFBTTtZQUNwQyxPQUFPLEtBQUssQ0FBQztRQUVqQixPQUFPLFdBQVcsQ0FBQyxNQUFNLEVBQUU7WUFDdkIsSUFBSSxXQUFXLENBQUMsS0FBSyxFQUFFLEtBQUssUUFBUSxDQUFDLEtBQUssRUFBRTtnQkFDeEMsT0FBTyxLQUFLLENBQUM7U0FDcEI7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRU8sc0JBQXNCLENBQUUsT0FBaUI7UUFDN0MsT0FBTyxJQUFBLHlCQUFLLEVBQUMsT0FBTyxDQUFvQixDQUFDO0lBQzdDLENBQUM7Q0FDSjtBQTNIRCw4Q0EySEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcmVtb3RlQ2hyb21lIGZyb20gJ2Nocm9tZS1yZW1vdGUtaW50ZXJmYWNlJztcbmltcG9ydCB7IEV4dGVybmFsQ29va2llcyB9IGZyb20gJ3Rlc3RjYWZlLWhhbW1lcmhlYWQnO1xuaW1wb3J0IFByb3RvY29sIGZyb20gJ2RldnRvb2xzLXByb3RvY29sJztcbmltcG9ydCBDb29raWUgPSBQcm90b2NvbC5OZXR3b3JrLkNvb2tpZTtcbmltcG9ydCB7IFVSTCB9IGZyb20gJ3VybCc7XG5pbXBvcnQgeyBDb29raWVPcHRpb25zIH0gZnJvbSAnLi4vdGVzdC1ydW4vY29tbWFuZHMvb3B0aW9ucyc7XG5pbXBvcnQgeyBDb29raWVQcm92aWRlciwgQ29va2llUHJvdmlkZXJCYXNlIH0gZnJvbSAnLi4vdGVzdC1ydW4vY29va2llcy9iYXNlJztcbmltcG9ydCBDb29raWVQYXJhbSA9IFByb3RvY29sLk5ldHdvcmsuQ29va2llUGFyYW07XG5pbXBvcnQgbWF0Y2hDb2xsZWN0aW9uIGZyb20gJy4uL3V0aWxzL21hdGNoLWNvbGxlY3Rpb24nO1xuaW1wb3J0IHsgZ2V0QWN0aXZlQ2xpZW50IH0gZnJvbSAnLi91dGlscy9nZXQtYWN0aXZlLWNsaWVudCc7XG5pbXBvcnQgeyBwYXJzZSB9IGZyb20gJ3NldC1jb29raWUtcGFyc2VyJztcbmltcG9ydCB7IGNhc3RBcnJheSB9IGZyb20gJ2xvZGFzaCc7XG5cbmRlY2xhcmUgdHlwZSBDb29raWVTYW1lU2l0ZSA9ICdMYXgnIHwgJ1N0cmljdCcgfCAnTm9uZSc7XG5cbmNvbnN0IE1BWF9USU1FU1RBTVAgPSA4NjQwMDAwMDAwMDAwMDAwO1xuXG5leHBvcnQgY2xhc3MgQ2RwQ29va2llUHJvdmlkZXIgZXh0ZW5kcyBDb29raWVQcm92aWRlckJhc2UgaW1wbGVtZW50cyBDb29raWVQcm92aWRlciB7XG4gICAgcHJpdmF0ZSBhc3luYyBfZ2V0Q2RwQ2xpZW50ICgpOiBQcm9taXNlPHJlbW90ZUNocm9tZS5Qcm90b2NvbEFwaT4ge1xuICAgICAgICBjb25zdCBicm93c2VyQ29ubmVjdGlvbiA9IHRoaXMudGVzdFJ1bi5icm93c2VyQ29ubmVjdGlvbjtcblxuICAgICAgICByZXR1cm4gZ2V0QWN0aXZlQ2xpZW50KGJyb3dzZXJDb25uZWN0aW9uKTtcbiAgICB9XG5cbiAgICBhc3luYyBpbml0aWFsaXplICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVsZXRlQ29va2llcygpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldENvb2tpZXMgKGV4dGVybmFsQ29va2llczogRXh0ZXJuYWxDb29raWVzW10pOiBQcm9taXNlPEV4dGVybmFsQ29va2llc1tdPiB7XG4gICAgICAgIGNvbnN0IGNsaWVudCAgICAgID0gYXdhaXQgdGhpcy5fZ2V0Q2RwQ2xpZW50KCk7XG4gICAgICAgIGNvbnN0IHsgY29va2llcyB9ID0gYXdhaXQgY2xpZW50LlN0b3JhZ2UuZ2V0Q29va2llcyh7fSk7XG5cbiAgICAgICAgcmV0dXJuIChtYXRjaENvbGxlY3Rpb24oY29va2llcywgZXh0ZXJuYWxDb29raWVzKSBhcyBDb29raWVbXSkubWFwKHRoaXMuX2NkcENvb2tpZVRvRXh0ZXJuYWxDb29raWUpO1xuICAgIH1cblxuICAgIGFzeW5jIHNldENvb2tpZXMgKGNvb2tpZXM6IHN0cmluZyB8IHN0cmluZ1tdIHwgQ29va2llT3B0aW9uc1tdLCB1cmw6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBjbGllbnQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSBhd2FpdCB0aGlzLl9nZXRDZHBDbGllbnQoKTtcbiAgICAgICAgY29uc3QgeyBob3N0bmFtZSA9ICcnLCBwYXRobmFtZSA9ICcvJyB9ID0gdXJsID8gbmV3IFVSTCh1cmwpIDoge307XG4gICAgICAgIGNvbnN0IGNvb2tpZXNBcnJheSAgICAgICAgICAgICAgICAgICAgICA9IGNhc3RBcnJheTxzdHJpbmcgfCBDb29raWVPcHRpb25zPihjb29raWVzKTtcblxuICAgICAgICBjb25zdCBwYXJzZWRDb29raWVzID0gdGhpcy5faXNDb29raWVPcHRpb25zQXJyYXkoY29va2llc0FycmF5KVxuICAgICAgICAgICAgPyBjb29raWVzQXJyYXlcbiAgICAgICAgICAgIDogdGhpcy5fcGFyc2VTZXRDb29raWVTdHJpbmdzKGNvb2tpZXNBcnJheSBhcyBzdHJpbmdbXSk7XG5cbiAgICAgICAgYXdhaXQgY2xpZW50Lk5ldHdvcmsuc2V0Q29va2llcyh7XG4gICAgICAgICAgICBjb29raWVzOiBwYXJzZWRDb29raWVzLm1hcChjb29raWUgPT4gdGhpcy5fY29va2llT3B0aW9uVG9DZHBDb29raWVQYXJhbShjb29raWUsIGhvc3RuYW1lLCBwYXRobmFtZSkpLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBkZWxldGVDb29raWVzIChjb29raWVzOiBDb29raWVPcHRpb25zW10gPSBbXSwgdXJsczogc3RyaW5nW10gPSBbXSk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBjbGllbnQgPSBhd2FpdCB0aGlzLl9nZXRDZHBDbGllbnQoKTtcblxuICAgICAgICBpZiAoIWNvb2tpZXMgfHwgIWNvb2tpZXMubGVuZ3RoKVxuICAgICAgICAgICAgcmV0dXJuIGNsaWVudC5OZXR3b3JrLmNsZWFyQnJvd3NlckNvb2tpZXMoKTtcblxuICAgICAgICBjb25zdCBwYXJzZWRVcmxzICAgID0gdGhpcy5fcGFyc2VVcmxzKHVybHMpO1xuICAgICAgICBsZXQgZXhpc3RpbmdDb29raWVzID0gYXdhaXQgdGhpcy5nZXRDb29raWVzKFtdKTtcblxuICAgICAgICBpZiAocGFyc2VkVXJscy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGV4aXN0aW5nQ29va2llcyA9IGV4aXN0aW5nQ29va2llcy5maWx0ZXIoY29va2llID0+IHBhcnNlZFVybHNcbiAgICAgICAgICAgICAgICAuZmluZCh1cmwgPT4gdXJsLmRvbWFpbiA9PT0gY29va2llLmRvbWFpbiAmJiB1cmwucGF0aCA9PT0gY29va2llLnBhdGgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGV4aXN0aW5nQ29va2llcyA9IG1hdGNoQ29sbGVjdGlvbihleGlzdGluZ0Nvb2tpZXMsIGNvb2tpZXMpIGFzIEV4dGVybmFsQ29va2llc1tdO1xuXG4gICAgICAgIGZvciAoY29uc3QgY29va2llIG9mIGV4aXN0aW5nQ29va2llcykge1xuICAgICAgICAgICAgYXdhaXQgY2xpZW50Lk5ldHdvcmsuZGVsZXRlQ29va2llcyh7XG4gICAgICAgICAgICAgICAgbmFtZTogICBjb29raWUubmFtZSB8fCAnJyxcbiAgICAgICAgICAgICAgICBkb21haW46IGNvb2tpZS5kb21haW4sXG4gICAgICAgICAgICAgICAgcGF0aDogICBjb29raWUucGF0aCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRDb29raWVIZWFkZXIgKHVybDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmcgfCBudWxsPiB7XG4gICAgICAgIGNvbnN0IFt7IGRvbWFpbiwgcGF0aCB9XSA9IHRoaXMuX3BhcnNlVXJscyhbdXJsXSk7XG4gICAgICAgIGNvbnN0IGNvb2tpZXMgICAgICAgICAgICA9IGF3YWl0IHRoaXMuZ2V0Q29va2llcyhbeyBkb21haW4gfV0pO1xuICAgICAgICBjb25zdCBmaWx0ZXJlZENvb2tpZXMgICAgPSBjb29raWVzLmZpbHRlcihjID0+IHRoaXMuX2luY2x1ZGVzUGF0aChjLnBhdGggfHwgJy8nLCBwYXRoKSk7XG5cbiAgICAgICAgcmV0dXJuIGZpbHRlcmVkQ29va2llcy5tYXAoYyA9PiBgJHsgYy5uYW1lIH09JHsgYy52YWx1ZSB9YCkuam9pbignOycpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2NkcENvb2tpZVRvRXh0ZXJuYWxDb29raWUgKGNvb2tpZTogQ29va2llKTogRXh0ZXJuYWxDb29raWVzIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6ICAgICBjb29raWUubmFtZSxcbiAgICAgICAgICAgIHZhbHVlOiAgICBjb29raWUudmFsdWUsXG4gICAgICAgICAgICBkb21haW46ICAgY29va2llLmRvbWFpbixcbiAgICAgICAgICAgIG1heEFnZTogICB2b2lkIDAsXG4gICAgICAgICAgICBwYXRoOiAgICAgY29va2llLnBhdGgsXG4gICAgICAgICAgICBleHBpcmVzOiAgdm9pZCAwLFxuICAgICAgICAgICAgc2VjdXJlOiAgIGNvb2tpZS5zZWN1cmUsXG4gICAgICAgICAgICBodHRwT25seTogY29va2llLmh0dHBPbmx5LFxuICAgICAgICAgICAgc2FtZVNpdGU6IGNvb2tpZS5zYW1lU2l0ZSA/PyAnbm9uZScsXG4gICAgICAgIH0gYXMgdW5rbm93biBhcyBFeHRlcm5hbENvb2tpZXM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfY29va2llT3B0aW9uVG9DZHBDb29raWVQYXJhbSAoY29va2llOiBDb29raWVPcHRpb25zLCBob3N0bmFtZTogc3RyaW5nLCBwYXRobmFtZTogc3RyaW5nKTogQ29va2llUGFyYW0ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogICAgIGNvb2tpZS5uYW1lLFxuICAgICAgICAgICAgdmFsdWU6ICAgIGNvb2tpZS52YWx1ZSxcbiAgICAgICAgICAgIGRvbWFpbjogICBjb29raWUuZG9tYWluID8/IGhvc3RuYW1lLFxuICAgICAgICAgICAgcGF0aDogICAgIGNvb2tpZS5wYXRoID8/IHBhdGhuYW1lLFxuICAgICAgICAgICAgc2VjdXJlOiAgIGNvb2tpZS5zZWN1cmUsXG4gICAgICAgICAgICBodHRwT25seTogZmFsc2UsXG4gICAgICAgICAgICBzYW1lU2l0ZTogY29va2llLnNhbWVTaXRlIGFzIENvb2tpZVNhbWVTaXRlLFxuICAgICAgICAgICAgZXhwaXJlczogIGNvb2tpZS5leHBpcmVzPy5nZXRUaW1lKCkgfHwgTUFYX1RJTUVTVEFNUCxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9wYXJzZVVybHMgKHVybHM6IHN0cmluZ1tdKTogeyBkb21haW46IHN0cmluZywgcGF0aDogc3RyaW5nIH1bXSB7XG4gICAgICAgIHJldHVybiB1cmxzLm1hcCh1cmwgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBob3N0bmFtZSwgcGF0aG5hbWUgfSA9IG5ldyBVUkwodXJsKTtcblxuICAgICAgICAgICAgcmV0dXJuIHsgZG9tYWluOiBob3N0bmFtZSwgcGF0aDogcGF0aG5hbWUgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfaW5jbHVkZXNQYXRoIChjb29raWVQYXRoOiBzdHJpbmcsIHVybFBhdGg6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoY29va2llUGF0aCA9PT0gJy8nKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgY29uc3QgY29va2llUGFydHMgPSBjb29raWVQYXRoLnNwbGl0KCcvJyk7XG4gICAgICAgIGNvbnN0IHVybFBhcnRzICAgID0gdXJsUGF0aC5zcGxpdCgnLycpO1xuXG4gICAgICAgIGlmIChjb29raWVQYXJ0cy5sZW5ndGggPiB1cmxQYXJ0cy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgd2hpbGUgKGNvb2tpZVBhcnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGNvb2tpZVBhcnRzLnNoaWZ0KCkgIT09IHVybFBhcnRzLnNoaWZ0KCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfcGFyc2VTZXRDb29raWVTdHJpbmdzIChjb29raWVzOiBzdHJpbmdbXSk6IENvb2tpZU9wdGlvbnNbXSB7XG4gICAgICAgIHJldHVybiBwYXJzZShjb29raWVzKSBhcyBDb29raWVPcHRpb25zW107XG4gICAgfVxufVxuIl19