"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const lodash_1 = require("lodash");
const string_1 = require("../../utils/string");
const http_status_codes_1 = require("http-status-codes");
const headers_1 = require("../../utils/headers");
class RequestPausedEventBasedEventFactory extends testcafe_hammerhead_1.BaseRequestHookEventFactory {
    constructor(event, sessionId) {
        super();
        this._event = event;
        this._responseBody = Buffer.alloc(0);
        this._sessionId = sessionId;
        this._modifyResponseFunction = this._createModifyResponseFunctions();
        this.headersModified = false;
    }
    _createModifyResponseFunctions() {
        return {
            setHeader: (name, value) => {
                const header = this._event.responseHeaders.find(h => h.name.toLowerCase() === name.toLowerCase());
                if (!header)
                    this._event.responseHeaders.push({ name, value });
                else
                    header.value = value;
                this.headersModified = true;
            },
            removeHeader: (name) => {
                (0, lodash_1.remove)(this._event.responseHeaders, header => header.name.toLowerCase() === name.toLowerCase());
                this.headersModified = true;
            },
        };
    }
    static _getRequestData(request) {
        if (request.postData)
            return (0, string_1.fromBase64String)(request.postData);
        return Buffer.alloc(0);
    }
    static _getIsAjaxRequest(event) {
        return event.resourceType === 'XHR'
            || event.resourceType === 'Fetch';
    }
    update(event) {
        this._event = event;
    }
    setResponseBody(body) {
        this._responseBody = body;
    }
    createRequestInfo() {
        const { requestId, request } = this._event;
        return new testcafe_hammerhead_1.RequestInfo({
            requestId,
            sessionId: this._sessionId,
            userAgent: testcafe_hammerhead_1.RequestInfo.getUserAgent(request.headers),
            url: request.url,
            method: request.method.toLowerCase(),
            headers: (0, headers_1.lowerCaseHeaderNames)(request.headers),
            body: RequestPausedEventBasedEventFactory._getRequestData(request),
            isAjax: RequestPausedEventBasedEventFactory._getIsAjaxRequest(this._event),
        });
    }
    createRequestOptions() {
        const parsedUrl = new URL(this._event.request.url);
        const requestParams = {
            method: this._event.request.method,
            url: this._event.request.url,
            protocol: parsedUrl.protocol,
            hostname: parsedUrl.hostname,
            host: parsedUrl.host,
            port: parsedUrl.port,
            path: parsedUrl.pathname,
            headers: this._event.request.headers,
            body: RequestPausedEventBasedEventFactory._getRequestData(this._event.request),
            isAjax: RequestPausedEventBasedEventFactory._getIsAjaxRequest(this._event),
        };
        if (parsedUrl.username)
            requestParams.auth = parsedUrl.username + ':' + parsedUrl.password;
        return new testcafe_hammerhead_1.RequestOptions(requestParams);
    }
    createConfigureResponseEvent(rule) {
        return new testcafe_hammerhead_1.ConfigureResponseEvent(rule, this._modifyResponseFunction);
    }
    createResponseInfo() {
        return new testcafe_hammerhead_1.ResponseInfo({
            statusCode: this._event.responseStatusCode || http_status_codes_1.StatusCodes.OK,
            headers: (0, headers_1.convertToOutgoingHttpHeaders)(this._event.responseHeaders),
            body: this._responseBody,
            sessionId: '',
            requestId: this._event.requestId,
            isSameOriginPolicyFailed: false,
        });
    }
}
exports.default = RequestPausedEventBasedEventFactory;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWVzdC1wYXVzZWQtZXZlbnQtYmFzZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvcHJveHlsZXNzL3JlcXVlc3QtaG9va3MvZXZlbnQtZmFjdG9yeS9yZXF1ZXN0LXBhdXNlZC1ldmVudC1iYXNlZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZEQVM2QjtBQUM3QixtQ0FBZ0M7QUFLaEMsK0NBQXNEO0FBQ3RELHlEQUFnRDtBQUNoRCxpREFBeUY7QUFHekYsTUFBcUIsbUNBQW9DLFNBQVEsaURBQTJCO0lBT3hGLFlBQW9CLEtBQXlCLEVBQUUsU0FBaUI7UUFDNUQsS0FBSyxFQUFFLENBQUM7UUFFUixJQUFJLENBQUMsTUFBTSxHQUFvQixLQUFLLENBQUM7UUFDckMsSUFBSSxDQUFDLGFBQWEsR0FBYSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxVQUFVLEdBQWdCLFNBQVMsQ0FBQztRQUN6QyxJQUFJLENBQUMsdUJBQXVCLEdBQUcsSUFBSSxDQUFDLDhCQUE4QixFQUFFLENBQUM7UUFDckUsSUFBSSxDQUFDLGVBQWUsR0FBVyxLQUFLLENBQUM7SUFDekMsQ0FBQztJQUVPLDhCQUE4QjtRQUNsQyxPQUFPO1lBQ0gsU0FBUyxFQUFFLENBQUMsSUFBWSxFQUFFLEtBQWEsRUFBRSxFQUFFO2dCQUN2QyxNQUFNLE1BQU0sR0FBSSxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWlDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztnQkFFckgsSUFBSSxDQUFDLE1BQU07b0JBQ04sSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFpQyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDOztvQkFFckUs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QyxJQUFJLEdBQUcsU0FBUyxDQUFDLFFBQVEsR0FBRyxHQUFHLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQztRQUV2RSxPQUFPLElBQUksb0NBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRU0sNEJBQTRCLENBQUUsSUFBdUI7UUFDeEQsT0FBTyxJQUFJLDRDQUFzQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRU0sa0JBQWtCO1FBQ3JCLE9BQU8sSUFBSSxrQ0FBWSxDQUFDO1lBQ3BCLFVBQVUsRUFBZ0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsSUFBSSwrQkFBVyxDQUFDLEVBQUU7WUFDMUUsT0FBTyxFQUFtQixJQUFBLHNDQUE0QixFQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDO1lBQ25GLElBQUksRUFBc0IsSUFBSSxDQUFDLGFBQWE7WUFDNUMsU0FBUyxFQUFpQixFQUFFO1lBQzVCLFNBQVMsRUFBaUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTO1lBQy9DLHdCQUF3QixFQUFFLEtBQUs7U0FDbEMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKO0FBNUdELHNEQTRHQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQmFzZVJlcXVlc3RIb29rRXZlbnRGYWN0b3J5LFxuICAgIENvbmZpZ3VyZVJlc3BvbnNlRXZlbnQsXG4gICAgTW9kaWZ5UmVzcG9uc2VGdW5jdGlvbnMsXG4gICAgUmVxdWVzdEZpbHRlclJ1bGUsXG4gICAgUmVxdWVzdEluZm8sXG4gICAgUmVxdWVzdE9wdGlvbnMsXG4gICAgUmVxdWVzdE9wdGlvbnNQYXJhbXMsXG4gICAgUmVzcG9uc2VJbmZvLFxufSBmcm9tICd0ZXN0Y2FmZS1oYW1tZXJoZWFkJztcbmltcG9ydCB7IHJlbW92ZSB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgUHJvdG9jb2wgZnJvbSAnZGV2dG9vbHMtcHJvdG9jb2wnO1xuaW1wb3J0IFJlcXVlc3RQYXVzZWRFdmVudCA9IFByb3RvY29sLkZldGNoLlJlcXVlc3RQYXVzZWRFdmVudDtcbmltcG9ydCBSZXF1ZXN0ID0gUHJvdG9jb2wuTmV0d29yay5SZXF1ZXN0O1xuaW1wb3J0IEhlYWRlckVudHJ5ID0gUHJvdG9jb2wuRmV0Y2guSGVhZGVyRW50cnk7XG5pbXBvcnQgeyBmcm9tQmFzZTY0U3RyaW5nIH0gZnJvbSAnLi4vLi4vdXRpbHMvc3RyaW5nJztcbmltcG9ydCB7IFN0YXR1c0NvZGVzIH0gZnJvbSAnaHR0cC1zdGF0dXMtY29kZXMnO1xuaW1wb3J0IHsgY29udmVydFRvT3V0Z29pbmdIdHRwSGVhZGVycywgbG93ZXJDYXNlSGVhZGVyTmFtZXMgfSBmcm9tICcuLi8uLi91dGlscy9oZWFkZXJzJztcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXF1ZXN0UGF1c2VkRXZlbnRCYXNlZEV2ZW50RmFjdG9yeSBleHRlbmRzIEJhc2VSZXF1ZXN0SG9va0V2ZW50RmFjdG9yeSB7XG4gICAgcHJpdmF0ZSBfZXZlbnQ6IFJlcXVlc3RQYXVzZWRFdmVudDtcbiAgICBwcml2YXRlIF9yZXNwb25zZUJvZHk6IEJ1ZmZlcjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9zZXNzaW9uSWQ6IHN0cmluZztcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9tb2RpZnlSZXNwb25zZUZ1bmN0aW9uOiBNb2RpZnlSZXNwb25zZUZ1bmN0aW9ucztcbiAgICBwdWJsaWMgaGVhZGVyc01vZGlmaWVkOiBib29sZWFuO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yIChldmVudDogUmVxdWVzdFBhdXNlZEV2ZW50LCBzZXNzaW9uSWQ6IHN0cmluZykge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuX2V2ZW50ICAgICAgICAgICAgICAgICAgPSBldmVudDtcbiAgICAgICAgdGhpcy5fcmVzcG9uc2VCb2R5ICAgICAgICAgICA9IEJ1ZmZlci5hbGxvYygwKTtcbiAgICAgICAgdGhpcy5fc2Vzc2lvbklkICAgICAgICAgICAgICA9IHNlc3Npb25JZDtcbiAgICAgICAgdGhpcy5fbW9kaWZ5UmVzcG9uc2VGdW5jdGlvbiA9IHRoaXMuX2NyZWF0ZU1vZGlmeVJlc3BvbnNlRnVuY3Rpb25zKCk7XG4gICAgICAgIHRoaXMuaGVhZGVyc01vZGlmaWVkICAgICAgICAgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9jcmVhdGVNb2RpZnlSZXNwb25zZUZ1bmN0aW9ucyAoKTogTW9kaWZ5UmVzcG9uc2VGdW5jdGlvbnMge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2V0SGVhZGVyOiAobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGVhZGVyID0gKHRoaXMuX2V2ZW50LnJlc3BvbnNlSGVhZGVycyBhcyBIZWFkZXJFbnRyeVtdKS5maW5kKGggPT4gaC5uYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWhlYWRlcilcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuX2V2ZW50LnJlc3BvbnNlSGVhZGVycyBhcyBIZWFkZXJFbnRyeVtdKS5wdXNoKHsgbmFtZSwgdmFsdWUgfSk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBoZWFkZXIudmFsdWUgPSB2YWx1ZTtcblxuICAgICAgICAgICAgICAgIHRoaXMuaGVhZGVyc01vZGlmaWVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZW1vdmVIZWFkZXI6IChuYW1lOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICByZW1vdmUodGhpcy5fZXZlbnQucmVzcG9uc2VIZWFkZXJzIGFzIEhlYWRlckVudHJ5W10sIGhlYWRlciA9PiBoZWFkZXIubmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCkpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5oZWFkZXJzTW9kaWZpZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBfZ2V0UmVxdWVzdERhdGEgKHJlcXVlc3Q6IFJlcXVlc3QpOiBCdWZmZXIge1xuICAgICAgICBpZiAocmVxdWVzdC5wb3N0RGF0YSlcbiAgICAgICAgICAgIHJldHVybiBmcm9tQmFzZTY0U3RyaW5nKHJlcXVlc3QucG9zdERhdGEpO1xuXG4gICAgICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgX2dldElzQWpheFJlcXVlc3QgKGV2ZW50OiBSZXF1ZXN0UGF1c2VkRXZlbnQpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50LnJlc291cmNlVHlwZSA9PT0gJ1hIUidcbiAgICAgICAgICAgIHx8IGV2ZW50LnJlc291cmNlVHlwZSA9PT0gJ0ZldGNoJztcbiAgICB9XG5cbiAgICBwdWJsaWMgdXBkYXRlIChldmVudDogUmVxdWVzdFBhdXNlZEV2ZW50KTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2V2ZW50ID0gZXZlbnQ7XG4gICAgfVxuXG4gICAgcHVibGljIHNldFJlc3BvbnNlQm9keSAoYm9keTogQnVmZmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX3Jlc3BvbnNlQm9keSA9IGJvZHk7XG4gICAgfVxuXG4gICAgcHVibGljIGNyZWF0ZVJlcXVlc3RJbmZvICgpOiBSZXF1ZXN0SW5mbyB7XG4gICAgICAgIGNvbnN0IHsgcmVxdWVzdElkLCByZXF1ZXN0IH0gPSB0aGlzLl9ldmVudDtcblxuICAgICAgICByZXR1cm4gbmV3IFJlcXVlc3RJbmZvKHtcbiAgICAgICAgICAgIHJlcXVlc3RJZCxcbiAgICAgICAgICAgIHNlc3Npb25JZDogdGhpcy5fc2Vzc2lvbklkLFxuICAgICAgICAgICAgdXNlckFnZW50OiBSZXF1ZXN0SW5mby5nZXRVc2VyQWdlbnQocmVxdWVzdC5oZWFkZXJzKSxcbiAgICAgICAgICAgIHVybDogICAgICAgcmVxdWVzdC51cmwsXG4gICAgICAgICAgICBtZXRob2Q6ICAgIHJlcXVlc3QubWV0aG9kLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICBoZWFkZXJzOiAgIGxvd2VyQ2FzZUhlYWRlck5hbWVzKHJlcXVlc3QuaGVhZGVycyksXG4gICAgICAgICAgICBib2R5OiAgICAgIFJlcXVlc3RQYXVzZWRFdmVudEJhc2VkRXZlbnRGYWN0b3J5Ll9nZXRSZXF1ZXN0RGF0YShyZXF1ZXN0KSxcbiAgICAgICAgICAgIGlzQWpheDogICAgUmVxdWVzdFBhdXNlZEV2ZW50QmFzZWRFdmVudEZhY3RvcnkuX2dldElzQWpheFJlcXVlc3QodGhpcy5fZXZlbnQpLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY3JlYXRlUmVxdWVzdE9wdGlvbnMgKCk6IFJlcXVlc3RPcHRpb25zIHtcbiAgICAgICAgY29uc3QgcGFyc2VkVXJsID0gbmV3IFVSTCh0aGlzLl9ldmVudC5yZXF1ZXN0LnVybCk7XG5cbiAgICAgICAgY29uc3QgcmVxdWVzdFBhcmFtczogUmVxdWVzdE9wdGlvbnNQYXJhbXMgPSB7XG4gICAgICAgICAgICBtZXRob2Q6ICAgdGhpcy5fZXZlbnQucmVxdWVzdC5tZXRob2QsXG4gICAgICAgICAgICB1cmw6ICAgICAgdGhpcy5fZXZlbnQucmVxdWVzdC51cmwsXG4gICAgICAgICAgICBwcm90b2NvbDogcGFyc2VkVXJsLnByb3RvY29sLFxuICAgICAgICAgICAgaG9zdG5hbWU6IHBhcnNlZFVybC5ob3N0bmFtZSxcbiAgICAgICAgICAgIGhvc3Q6ICAgICBwYXJzZWRVcmwuaG9zdCxcbiAgICAgICAgICAgIHBvcnQ6ICAgICBwYXJzZWRVcmwucG9ydCxcbiAgICAgICAgICAgIHBhdGg6ICAgICBwYXJzZWRVcmwucGF0aG5hbWUsXG4gICAgICAgICAgICBoZWFkZXJzOiAgdGhpcy5fZXZlbnQucmVxdWVzdC5oZWFkZXJzLFxuICAgICAgICAgICAgYm9keTogICAgIFJlcXVlc3RQYXVzZWRFdmVudEJhc2VkRXZlbnRGYWN0b3J5Ll9nZXRSZXF1ZXN0RGF0YSh0aGlzLl9ldmVudC5yZXF1ZXN0KSxcbiAgICAgICAgICAgIGlzQWpheDogICBSZXF1ZXN0UGF1c2VkRXZlbnRCYXNlZEV2ZW50RmFjdG9yeS5fZ2V0SXNBamF4UmVxdWVzdCh0aGlzLl9ldmVudCksXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHBhcnNlZFVybC51c2VybmFtZSlcbiAgICAgICAgICAgIHJlcXVlc3RQYXJhbXMuYXV0aCA9IHBhcnNlZFVybC51c2VybmFtZSArICc6JyArIHBhcnNlZFVybC5wYXNzd29yZDtcblxuICAgICAgICByZXR1cm4gbmV3IFJlcXVlc3RPcHRpb25zKHJlcXVlc3RQYXJhbXMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBjcmVhdGVDb25maWd1cmVSZXNwb25zZUV2ZW50IChydWxlOiBSZXF1ZXN0RmlsdGVyUnVsZSk6IENvbmZpZ3VyZVJlc3BvbnNlRXZlbnQge1xuICAgICAgICByZXR1cm4gbmV3IENvbmZpZ3VyZVJlc3BvbnNlRXZlbnQocnVsZSwgdGhpcy5fbW9kaWZ5UmVzcG9uc2VGdW5jdGlvbik7XG4gICAgfVxuXG4gICAgcHVibGljIGNyZWF0ZVJlc3BvbnNlSW5mbyAoKTogUmVzcG9uc2VJbmZvIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXNwb25zZUluZm8oe1xuICAgICAgICAgICAgc3RhdHVzQ29kZTogICAgICAgICAgICAgICB0aGlzLl9ldmVudC5yZXNwb25zZVN0YXR1c0NvZGUgfHwgU3RhdHVzQ29kZXMuT0ssXG4gICAgICAgICAgICBoZWFkZXJzOiAgICAgICAgICAgICAgICAgIGNvbnZlcnRUb091dGdvaW5nSHR0cEhlYWRlcnModGhpcy5fZXZlbnQucmVzcG9uc2VIZWFkZXJzKSxcbiAgICAgICAgICAgIGJvZHk6ICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVzcG9uc2VCb2R5LFxuICAgICAgICAgICAgc2Vzc2lvbklkOiAgICAgICAgICAgICAgICAnJyxcbiAgICAgICAgICAgIHJlcXVlc3RJZDogICAgICAgICAgICAgICAgdGhpcy5fZXZlbnQucmVxdWVzdElkLFxuICAgICAgICAgICAgaXNTYW1lT3JpZ2luUG9saWN5RmFpbGVkOiBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19