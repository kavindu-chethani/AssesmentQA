"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const cdp_1 = require("../../utils/cdp");
class FrameNavigatedEventBasedEventFactory extends testcafe_hammerhead_1.BaseRequestHookEventFactory {
    constructor(event, sessionId) {
        super();
        this._event = event;
        this._sessionId = sessionId;
    }
    createRequestInfo() {
        // NOTE: We can't get some request information from the FrameNavigated event.
        // So, we initialize the RequestInfo object with empty or default values.
        return new testcafe_hammerhead_1.RequestInfo({
            requestId: (0, cdp_1.getRequestId)(this._event),
            sessionId: this._sessionId,
            userAgent: '',
            url: this._event.frame.url,
            method: '',
            headers: {},
            body: Buffer.alloc(0),
            isAjax: false,
        });
    }
    createConfigureResponseEvent(rule) {
        // NOTE: Used as a stub
        return new testcafe_hammerhead_1.ConfigureResponseEvent(rule, {});
    }
    createRequestOptions() {
        // NOTE: Used as a stub
        return {};
    }
    createResponseInfo() {
        // NOTE: Used as a stub
        return {};
    }
}
exports.default = FrameNavigatedEventBasedEventFactory;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJhbWUtbmF2aWdhdGVkLWV2ZW50LWJhc2VkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3Byb3h5bGVzcy9yZXF1ZXN0LWhvb2tzL2V2ZW50LWZhY3RvcnkvZnJhbWUtbmF2aWdhdGVkLWV2ZW50LWJhc2VkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkRBUTZCO0FBRzdCLHlDQUErQztBQUUvQyxNQUFxQixvQ0FBcUMsU0FBUSxpREFBMkI7SUFHekYsWUFBb0IsS0FBMEIsRUFBRSxTQUFpQjtRQUM3RCxLQUFLLEVBQUUsQ0FBQztRQUVSLElBQUksQ0FBQyxNQUFNLEdBQU8sS0FBSyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO0lBQ2hDLENBQUM7SUFFTSxpQkFBaUI7UUFDcEIsNkVBQTZFO1FBQzdFLHlFQUF5RTtRQUN6RSxPQUFPLElBQUksaUNBQVcsQ0FBQztZQUNuQixTQUFTLEVBQUUsSUFBQSxrQkFBWSxFQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDcEMsU0FBUyxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQzFCLFNBQVMsRUFBRSxFQUFFO1lBQ2IsR0FBRyxFQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUc7WUFDaEMsTUFBTSxFQUFLLEVBQUU7WUFDYixPQUFPLEVBQUksRUFBRTtZQUNiLElBQUksRUFBTyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUMxQixNQUFNLEVBQUssS0FBSztTQUNuQixDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU0sNEJBQTRCLENBQUUsSUFBdUI7UUFDeEQsdUJBQXVCO1FBQ3ZCLE9BQU8sSUFBSSw0Q0FBc0IsQ0FBQyxJQUFJLEVBQUUsRUFBNkIsQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFFTSxvQkFBb0I7UUFDdkIsdUJBQXVCO1FBQ3ZCLE9BQU8sRUFBb0IsQ0FBQztJQUNoQyxDQUFDO0lBRU0sa0JBQWtCO1FBQ3JCLHVCQUF1QjtRQUN2QixPQUFPLEVBQWtCLENBQUM7SUFDOUIsQ0FBQztDQUNKO0FBdkNELHVEQXVDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQmFzZVJlcXVlc3RIb29rRXZlbnRGYWN0b3J5LFxuICAgIENvbmZpZ3VyZVJlc3BvbnNlRXZlbnQsXG4gICAgTW9kaWZ5UmVzcG9uc2VGdW5jdGlvbnMsXG4gICAgUmVxdWVzdEZpbHRlclJ1bGUsXG4gICAgUmVxdWVzdEluZm8sXG4gICAgUmVxdWVzdE9wdGlvbnMsXG4gICAgUmVzcG9uc2VJbmZvLFxufSBmcm9tICd0ZXN0Y2FmZS1oYW1tZXJoZWFkJztcbmltcG9ydCBQcm90b2NvbCBmcm9tICdkZXZ0b29scy1wcm90b2NvbCc7XG5pbXBvcnQgRnJhbWVOYXZpZ2F0ZWRFdmVudCA9IFByb3RvY29sLlBhZ2UuRnJhbWVOYXZpZ2F0ZWRFdmVudDtcbmltcG9ydCB7IGdldFJlcXVlc3RJZCB9IGZyb20gJy4uLy4uL3V0aWxzL2NkcCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZyYW1lTmF2aWdhdGVkRXZlbnRCYXNlZEV2ZW50RmFjdG9yeSBleHRlbmRzIEJhc2VSZXF1ZXN0SG9va0V2ZW50RmFjdG9yeSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfZXZlbnQ6IEZyYW1lTmF2aWdhdGVkRXZlbnQ7XG4gICAgcHJpdmF0ZSByZWFkb25seSBfc2Vzc2lvbklkOiBzdHJpbmc7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yIChldmVudDogRnJhbWVOYXZpZ2F0ZWRFdmVudCwgc2Vzc2lvbklkOiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLl9ldmVudCAgICAgPSBldmVudDtcbiAgICAgICAgdGhpcy5fc2Vzc2lvbklkID0gc2Vzc2lvbklkO1xuICAgIH1cblxuICAgIHB1YmxpYyBjcmVhdGVSZXF1ZXN0SW5mbyAoKTogUmVxdWVzdEluZm8ge1xuICAgICAgICAvLyBOT1RFOiBXZSBjYW4ndCBnZXQgc29tZSByZXF1ZXN0IGluZm9ybWF0aW9uIGZyb20gdGhlIEZyYW1lTmF2aWdhdGVkIGV2ZW50LlxuICAgICAgICAvLyBTbywgd2UgaW5pdGlhbGl6ZSB0aGUgUmVxdWVzdEluZm8gb2JqZWN0IHdpdGggZW1wdHkgb3IgZGVmYXVsdCB2YWx1ZXMuXG4gICAgICAgIHJldHVybiBuZXcgUmVxdWVzdEluZm8oe1xuICAgICAgICAgICAgcmVxdWVzdElkOiBnZXRSZXF1ZXN0SWQodGhpcy5fZXZlbnQpLFxuICAgICAgICAgICAgc2Vzc2lvbklkOiB0aGlzLl9zZXNzaW9uSWQsXG4gICAgICAgICAgICB1c2VyQWdlbnQ6ICcnLFxuICAgICAgICAgICAgdXJsOiAgICAgICB0aGlzLl9ldmVudC5mcmFtZS51cmwsXG4gICAgICAgICAgICBtZXRob2Q6ICAgICcnLFxuICAgICAgICAgICAgaGVhZGVyczogICB7fSxcbiAgICAgICAgICAgIGJvZHk6ICAgICAgQnVmZmVyLmFsbG9jKDApLFxuICAgICAgICAgICAgaXNBamF4OiAgICBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGNyZWF0ZUNvbmZpZ3VyZVJlc3BvbnNlRXZlbnQgKHJ1bGU6IFJlcXVlc3RGaWx0ZXJSdWxlKTogQ29uZmlndXJlUmVzcG9uc2VFdmVudCB7XG4gICAgICAgIC8vIE5PVEU6IFVzZWQgYXMgYSBzdHViXG4gICAgICAgIHJldHVybiBuZXcgQ29uZmlndXJlUmVzcG9uc2VFdmVudChydWxlLCB7fSBhcyBNb2RpZnlSZXNwb25zZUZ1bmN0aW9ucyk7XG4gICAgfVxuXG4gICAgcHVibGljIGNyZWF0ZVJlcXVlc3RPcHRpb25zICgpOiBSZXF1ZXN0T3B0aW9ucyB7XG4gICAgICAgIC8vIE5PVEU6IFVzZWQgYXMgYSBzdHViXG4gICAgICAgIHJldHVybiB7fSBhcyBSZXF1ZXN0T3B0aW9ucztcbiAgICB9XG5cbiAgICBwdWJsaWMgY3JlYXRlUmVzcG9uc2VJbmZvICgpOiBSZXNwb25zZUluZm8ge1xuICAgICAgICAvLyBOT1RFOiBVc2VkIGFzIGEgc3R1YlxuICAgICAgICByZXR1cm4ge30gYXMgUmVzcG9uc2VJbmZvO1xuICAgIH1cbn1cbiJdfQ==