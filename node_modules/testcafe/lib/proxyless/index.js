"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const request_pipeline_1 = __importDefault(require("./request-pipeline"));
const add_custom_debug_formatters_1 = __importDefault(require("./add-custom-debug-formatters"));
const debug_loggers_1 = require("../utils/debug-loggers");
const session_storage_1 = __importDefault(require("./session-storage"));
class Proxyless {
    constructor(browserId, client) {
        this._client = client;
        this.requestPipeline = new request_pipeline_1.default(browserId, client);
        this.sessionStorage = new session_storage_1.default(browserId, client);
        this.sessionStorage.on('contextStorageSync', ({ sessionStorage, testRunId, frameDriverId }) => {
            if (sessionStorage) {
                this.requestPipeline.contextStorage = this.requestPipeline.contextStorage || {};
                this.requestPipeline.contextStorage[testRunId] = this.requestPipeline.contextStorage[testRunId] || {};
                this.requestPipeline.contextStorage[testRunId][frameDriverId] = sessionStorage;
            }
        });
        this.sessionStorage.on('contextStorageTestRunDone', ({ testRunId }) => {
            if (this.requestPipeline.contextStorage)
                delete this.requestPipeline.contextStorage[testRunId];
        });
        (0, add_custom_debug_formatters_1.default)();
    }
    async init(options) {
        const proxylessSystems = [
            this.requestPipeline,
            this.sessionStorage,
        ];
        for (const api of proxylessSystems)
            await api.init(options);
        (0, debug_loggers_1.proxylessLogger)('proxyless initialized');
    }
    async dispose() {
        this.requestPipeline.stop();
        await this.requestPipeline.dispose();
        (0, debug_loggers_1.proxylessLogger)('proxyless disposed');
    }
}
exports.default = Proxyless;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcHJveHlsZXNzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsMEVBQTBEO0FBQzFELGdHQUFxRTtBQUVyRSwwREFBeUQ7QUFDekQsd0VBQStDO0FBRS9DLE1BQXFCLFNBQVM7SUFLMUIsWUFBb0IsU0FBaUIsRUFBRSxNQUFtQjtRQUN0RCxJQUFJLENBQUMsT0FBTyxHQUFXLE1BQU0sQ0FBQztRQUM5QixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksMEJBQXdCLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxjQUFjLEdBQUksSUFBSSx5QkFBYyxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUU3RCxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQUUsRUFBRSxFQUFFO1lBQzFGLElBQUksY0FBYyxFQUFFO2dCQUNoQixJQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsSUFBSSxFQUFFLENBQUM7Z0JBQ2hGLElBQUksQ0FBQyxlQUFlLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDdEcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUMsYUFBYSxDQUFDLEdBQUcsY0FBYyxDQUFDO2FBQ2xGO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQywyQkFBMkIsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLEVBQUUsRUFBRTtZQUNsRSxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsY0FBYztnQkFDbkMsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM5RCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUEscUNBQXdCLEdBQUUsQ0FBQztJQUMvQixDQUFDO0lBRU0sS0FBSyxDQUFDLElBQUksQ0FBRSxPQUE4QjtRQUM3QyxNQUFNLGdCQUFnQixHQUFHO1lBQ3JCLElBQUksQ0FBQyxlQUFlO1lBQ3BCLElBQUksQ0FBQyxjQUFjO1NBQ3RCLENBQUM7UUFFRixLQUFLLE1BQU0sR0FBRyxJQUFJLGdCQUFnQjtZQUM5QixNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFNUIsSUFBQSwrQkFBZSxFQUFDLHVCQUF1QixDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVNLEtBQUssQ0FBQyxPQUFPO1FBQ2hCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFNUIsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRXJDLElBQUEsK0JBQWUsRUFBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQzFDLENBQUM7Q0FDSjtBQTdDRCw0QkE2Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm90b2NvbEFwaSB9IGZyb20gJ2Nocm9tZS1yZW1vdGUtaW50ZXJmYWNlJztcbmltcG9ydCBQcm94eWxlc3NSZXF1ZXN0UGlwZWxpbmUgZnJvbSAnLi9yZXF1ZXN0LXBpcGVsaW5lJztcbmltcG9ydCBhZGRDdXN0b21EZWJ1Z0Zvcm1hdHRlcnMgZnJvbSAnLi9hZGQtY3VzdG9tLWRlYnVnLWZvcm1hdHRlcnMnO1xuaW1wb3J0IHsgUHJveHlsZXNzU2V0dXBPcHRpb25zIH0gZnJvbSAnLi4vc2hhcmVkL3R5cGVzJztcbmltcG9ydCB7IHByb3h5bGVzc0xvZ2dlciB9IGZyb20gJy4uL3V0aWxzL2RlYnVnLWxvZ2dlcnMnO1xuaW1wb3J0IFNlc3Npb25TdG9yYWdlIGZyb20gJy4vc2Vzc2lvbi1zdG9yYWdlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJveHlsZXNzIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9jbGllbnQ6IFByb3RvY29sQXBpO1xuICAgIHB1YmxpYyByZWFkb25seSByZXF1ZXN0UGlwZWxpbmU7XG4gICAgcHVibGljIHJlYWRvbmx5IHNlc3Npb25TdG9yYWdlOiBTZXNzaW9uU3RvcmFnZTtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvciAoYnJvd3NlcklkOiBzdHJpbmcsIGNsaWVudDogUHJvdG9jb2xBcGkpIHtcbiAgICAgICAgdGhpcy5fY2xpZW50ICAgICAgICAgPSBjbGllbnQ7XG4gICAgICAgIHRoaXMucmVxdWVzdFBpcGVsaW5lID0gbmV3IFByb3h5bGVzc1JlcXVlc3RQaXBlbGluZShicm93c2VySWQsIGNsaWVudCk7XG4gICAgICAgIHRoaXMuc2Vzc2lvblN0b3JhZ2UgID0gbmV3IFNlc3Npb25TdG9yYWdlKGJyb3dzZXJJZCwgY2xpZW50KTtcblxuICAgICAgICB0aGlzLnNlc3Npb25TdG9yYWdlLm9uKCdjb250ZXh0U3RvcmFnZVN5bmMnLCAoeyBzZXNzaW9uU3RvcmFnZSwgdGVzdFJ1bklkLCBmcmFtZURyaXZlcklkIH0pID0+IHtcbiAgICAgICAgICAgIGlmIChzZXNzaW9uU3RvcmFnZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVxdWVzdFBpcGVsaW5lLmNvbnRleHRTdG9yYWdlID0gdGhpcy5yZXF1ZXN0UGlwZWxpbmUuY29udGV4dFN0b3JhZ2UgfHwge307XG4gICAgICAgICAgICAgICAgdGhpcy5yZXF1ZXN0UGlwZWxpbmUuY29udGV4dFN0b3JhZ2VbdGVzdFJ1bklkXSA9IHRoaXMucmVxdWVzdFBpcGVsaW5lLmNvbnRleHRTdG9yYWdlW3Rlc3RSdW5JZF0gfHwge307XG4gICAgICAgICAgICAgICAgdGhpcy5yZXF1ZXN0UGlwZWxpbmUuY29udGV4dFN0b3JhZ2VbdGVzdFJ1bklkXVtmcmFtZURyaXZlcklkXSA9IHNlc3Npb25TdG9yYWdlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnNlc3Npb25TdG9yYWdlLm9uKCdjb250ZXh0U3RvcmFnZVRlc3RSdW5Eb25lJywgKHsgdGVzdFJ1bklkIH0pID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlcXVlc3RQaXBlbGluZS5jb250ZXh0U3RvcmFnZSlcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5yZXF1ZXN0UGlwZWxpbmUuY29udGV4dFN0b3JhZ2VbdGVzdFJ1bklkXTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYWRkQ3VzdG9tRGVidWdGb3JtYXR0ZXJzKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGluaXQgKG9wdGlvbnM6IFByb3h5bGVzc1NldHVwT3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBwcm94eWxlc3NTeXN0ZW1zID0gW1xuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0UGlwZWxpbmUsXG4gICAgICAgICAgICB0aGlzLnNlc3Npb25TdG9yYWdlLFxuICAgICAgICBdO1xuXG4gICAgICAgIGZvciAoY29uc3QgYXBpIG9mIHByb3h5bGVzc1N5c3RlbXMpXG4gICAgICAgICAgICBhd2FpdCBhcGkuaW5pdChvcHRpb25zKTtcblxuICAgICAgICBwcm94eWxlc3NMb2dnZXIoJ3Byb3h5bGVzcyBpbml0aWFsaXplZCcpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBkaXNwb3NlICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdGhpcy5yZXF1ZXN0UGlwZWxpbmUuc3RvcCgpO1xuXG4gICAgICAgIGF3YWl0IHRoaXMucmVxdWVzdFBpcGVsaW5lLmRpc3Bvc2UoKTtcblxuICAgICAgICBwcm94eWxlc3NMb2dnZXIoJ3Byb3h5bGVzcyBkaXNwb3NlZCcpO1xuICAgIH1cbn1cbiJdfQ==