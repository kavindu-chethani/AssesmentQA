"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../types");
// @ts-ignore
const hammerhead_1 = require("../../client/core/deps/hammerhead");
const utils_1 = require("./utils");
const MOUSE_EVENT_OPTIONS = {
    clickCount: 1,
    button: 'left',
};
class CDPEventDescriptor {
    static _getKeyDownEventText(options) {
        if (options.isNewLine)
            return '\r';
        if (options.keyProperty.length === 1)
            return options.keyProperty;
        return '';
    }
    static createKeyDownOptions(options) {
        const text = CDPEventDescriptor._getKeyDownEventText(options);
        return {
            type: text ? 'keyDown' : 'rawKeyDown',
            modifiers: options.modifiers || 0,
            windowsVirtualKeyCode: options.keyCode,
            key: options.keyProperty,
            text,
        };
    }
    static createKeyUpOptions(options) {
        return {
            type: 'keyUp',
            modifiers: options.modifiers || 0,
            key: options.keyProperty,
            windowsVirtualKeyCode: options.keyCode,
        };
    }
    static createMouseEventOptions(type, options, leftTopPoint) {
        return hammerhead_1.utils.extend({
            x: options.options.clientX + leftTopPoint.x,
            y: options.options.clientY + leftTopPoint.y,
            modifiers: (0, utils_1.calculateKeyModifiersValue)(options.options),
            button: (0, utils_1.calculateMouseButtonValue)(options.options),
            type,
        }, MOUSE_EVENT_OPTIONS);
    }
    static delay(delay) {
        return {
            type: types_1.EventType.Delay,
            options: { delay },
        };
    }
    static keyDown(keyInfo) {
        return {
            type: types_1.EventType.Keyboard,
            options: CDPEventDescriptor.createKeyDownOptions(keyInfo),
        };
    }
    static keyUp(keyInfo) {
        return {
            type: types_1.EventType.Keyboard,
            options: CDPEventDescriptor.createKeyUpOptions(keyInfo),
        };
    }
}
exports.default = CDPEventDescriptor;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtZGVzY3JpcHRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcm94eWxlc3MvY2xpZW50L2V2ZW50LWRlc2NyaXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvQ0FBcUM7QUFFckMsYUFBYTtBQUNiLGtFQUEwRDtBQUMxRCxtQ0FBZ0Y7QUFHaEYsTUFBTSxtQkFBbUIsR0FBRztJQUN4QixVQUFVLEVBQUUsQ0FBQztJQUNiLE1BQU0sRUFBTSxNQUFNO0NBQ3JCLENBQUM7QUFFRixNQUFxQixrQkFBa0I7SUFDM0IsTUFBTSxDQUFDLG9CQUFvQixDQUFFLE9BQXlCO1FBQzFELElBQUksT0FBTyxDQUFDLFNBQVM7WUFDakIsT0FBTyxJQUFJLENBQUM7UUFFaEIsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sS0FBSyxDQUFDO1lBQ2hDLE9BQU8sT0FBTyxDQUFDLFdBQVcsQ0FBQztRQUUvQixPQUFPLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFTSxNQUFNLENBQUMsb0JBQW9CLENBQUUsT0FBeUI7UUFDekQsTUFBTSxJQUFJLEdBQUcsa0JBQWtCLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFOUQsT0FBTztZQUNILElBQUksRUFBbUIsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFlBQVk7WUFDdEQsU0FBUyxFQUFjLE9BQU8sQ0FBQyxTQUFTLElBQUksQ0FBQztZQUM3QyxxQkFBcUIsRUFBRSxPQUFPLENBQUMsT0FBTztZQUN0QyxHQUFHLEVBQW9CLE9BQU8sQ0FBQyxXQUFXO1lBQzFDLElBQUk7U0FDUCxDQUFDO0lBQ04sQ0FBQztJQUVNLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBRSxPQUF5QjtRQUN2RCxPQUFPO1lBQ0gsSUFBSSxFQUFtQixPQUFPO1lBQzlCLFNBQVMsRUFBYyxPQUFPLENBQUMsU0FBUyxJQUFJLENBQUM7WUFDN0MsR0FBRyxFQUFvQixPQUFPLENBQUMsV0FBVztZQUMxQyxxQkFBcUIsRUFBRSxPQUFPLENBQUMsT0FBTztTQUN6QyxDQUFDO0lBQ04sQ0FBQztJQUVNLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBRSxJQUFZLEVBQUUsT0FBWSxFQUFFLFlBQWdDO1FBQy9GLE9BQU8sa0JBQUssQ0FBQyxNQUFNLENBQUM7WUFDaEIsQ0FBQyxFQUFVLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxHQUFHLFlBQVksQ0FBQyxDQUFDO1lBQ25ELENBQUMsRUFBVSxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxZQUFZLENBQUMsQ0FBQztZQUNuRCxTQUFTLEVBQUUsSUFBQSxrQ0FBMEIsRUFBQyxPQUFPLENBQUMsT0FBTyxDQUFDO1lBQ3RELE1BQU0sRUFBSyxJQUFBLGlDQUF5QixFQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7WUFDckQsSUFBSTtTQUNQLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQUssQ0FBRSxLQUFhO1FBQzlCLE9BQU87WUFDSCxJQUFJLEVBQUssaUJBQVMsQ0FBQyxLQUFLO1lBQ3hCLE9BQU8sRUFBRSxFQUFFLEtBQUssRUFBRTtTQUNyQixDQUFDO0lBQ04sQ0FBQztJQUVNLE1BQU0sQ0FBQyxPQUFPLENBQUUsT0FBeUI7UUFDNUMsT0FBTztZQUNILElBQUksRUFBSyxpQkFBUyxDQUFDLFFBQVE7WUFDM0IsT0FBTyxFQUFFLGtCQUFrQixDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQztTQUM1RCxDQUFDO0lBQ04sQ0FBQztJQUVNLE1BQU0sQ0FBQyxLQUFLLENBQUUsT0FBeUI7UUFDMUMsT0FBTztZQUNILElBQUksRUFBSyxpQkFBUyxDQUFDLFFBQVE7WUFDM0IsT0FBTyxFQUFFLGtCQUFrQixDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQztTQUMxRCxDQUFDO0lBQ04sQ0FBQztDQUNKO0FBOURELHFDQThEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50VHlwZSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IFNpbXVsYXRlZEtleUluZm8gfSBmcm9tICcuL2tleS1wcmVzcy91dGlscyc7XG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgeyB1dGlscyB9IGZyb20gJy4uLy4uL2NsaWVudC9jb3JlL2RlcHMvaGFtbWVyaGVhZCc7XG5pbXBvcnQgeyBjYWxjdWxhdGVLZXlNb2RpZmllcnNWYWx1ZSwgY2FsY3VsYXRlTW91c2VCdXR0b25WYWx1ZSB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IEF4aXNWYWx1ZXMgZnJvbSAnLi4vLi4vY2xpZW50L2NvcmUvdXRpbHMvdmFsdWVzL2F4aXMtdmFsdWVzJztcblxuY29uc3QgTU9VU0VfRVZFTlRfT1BUSU9OUyA9IHtcbiAgICBjbGlja0NvdW50OiAxLFxuICAgIGJ1dHRvbjogICAgICdsZWZ0Jyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENEUEV2ZW50RGVzY3JpcHRvciB7XG4gICAgcHJpdmF0ZSBzdGF0aWMgX2dldEtleURvd25FdmVudFRleHQgKG9wdGlvbnM6IFNpbXVsYXRlZEtleUluZm8pOiBhbnkge1xuICAgICAgICBpZiAob3B0aW9ucy5pc05ld0xpbmUpXG4gICAgICAgICAgICByZXR1cm4gJ1xccic7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMua2V5UHJvcGVydHkubGVuZ3RoID09PSAxKVxuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMua2V5UHJvcGVydHk7XG5cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlS2V5RG93bk9wdGlvbnMgKG9wdGlvbnM6IFNpbXVsYXRlZEtleUluZm8pOiBhbnkge1xuICAgICAgICBjb25zdCB0ZXh0ID0gQ0RQRXZlbnREZXNjcmlwdG9yLl9nZXRLZXlEb3duRXZlbnRUZXh0KG9wdGlvbnMpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAgICAgICAgICAgICAgICAgIHRleHQgPyAna2V5RG93bicgOiAncmF3S2V5RG93bicsXG4gICAgICAgICAgICBtb2RpZmllcnM6ICAgICAgICAgICAgIG9wdGlvbnMubW9kaWZpZXJzIHx8IDAsXG4gICAgICAgICAgICB3aW5kb3dzVmlydHVhbEtleUNvZGU6IG9wdGlvbnMua2V5Q29kZSxcbiAgICAgICAgICAgIGtleTogICAgICAgICAgICAgICAgICAgb3B0aW9ucy5rZXlQcm9wZXJ0eSxcbiAgICAgICAgICAgIHRleHQsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGVLZXlVcE9wdGlvbnMgKG9wdGlvbnM6IFNpbXVsYXRlZEtleUluZm8pOiBhbnkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogICAgICAgICAgICAgICAgICAna2V5VXAnLFxuICAgICAgICAgICAgbW9kaWZpZXJzOiAgICAgICAgICAgICBvcHRpb25zLm1vZGlmaWVycyB8fCAwLFxuICAgICAgICAgICAga2V5OiAgICAgICAgICAgICAgICAgICBvcHRpb25zLmtleVByb3BlcnR5LFxuICAgICAgICAgICAgd2luZG93c1ZpcnR1YWxLZXlDb2RlOiBvcHRpb25zLmtleUNvZGUsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGVNb3VzZUV2ZW50T3B0aW9ucyAodHlwZTogc3RyaW5nLCBvcHRpb25zOiBhbnksIGxlZnRUb3BQb2ludDogQXhpc1ZhbHVlczxudW1iZXI+KTogYW55IHtcbiAgICAgICAgcmV0dXJuIHV0aWxzLmV4dGVuZCh7XG4gICAgICAgICAgICB4OiAgICAgICAgIG9wdGlvbnMub3B0aW9ucy5jbGllbnRYICsgbGVmdFRvcFBvaW50LngsXG4gICAgICAgICAgICB5OiAgICAgICAgIG9wdGlvbnMub3B0aW9ucy5jbGllbnRZICsgbGVmdFRvcFBvaW50LnksXG4gICAgICAgICAgICBtb2RpZmllcnM6IGNhbGN1bGF0ZUtleU1vZGlmaWVyc1ZhbHVlKG9wdGlvbnMub3B0aW9ucyksXG4gICAgICAgICAgICBidXR0b246ICAgIGNhbGN1bGF0ZU1vdXNlQnV0dG9uVmFsdWUob3B0aW9ucy5vcHRpb25zKSxcbiAgICAgICAgICAgIHR5cGUsXG4gICAgICAgIH0sIE1PVVNFX0VWRU5UX09QVElPTlMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZGVsYXkgKGRlbGF5OiBudW1iZXIpOiBhbnkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogICAgRXZlbnRUeXBlLkRlbGF5LFxuICAgICAgICAgICAgb3B0aW9uczogeyBkZWxheSB9LFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMga2V5RG93biAoa2V5SW5mbzogU2ltdWxhdGVkS2V5SW5mbyk6IGFueSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAgICBFdmVudFR5cGUuS2V5Ym9hcmQsXG4gICAgICAgICAgICBvcHRpb25zOiBDRFBFdmVudERlc2NyaXB0b3IuY3JlYXRlS2V5RG93bk9wdGlvbnMoa2V5SW5mbyksXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBrZXlVcCAoa2V5SW5mbzogU2ltdWxhdGVkS2V5SW5mbyk6IGFueSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAgICBFdmVudFR5cGUuS2V5Ym9hcmQsXG4gICAgICAgICAgICBvcHRpb25zOiBDRFBFdmVudERlc2NyaXB0b3IuY3JlYXRlS2V5VXBPcHRpb25zKGtleUluZm8pLFxuICAgICAgICB9O1xuICAgIH1cbn1cbiJdfQ==