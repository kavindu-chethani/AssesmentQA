"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../types");
const axis_values_1 = __importDefault(require("../../client/core/utils/values/axis-values"));
const event_descriptor_1 = __importDefault(require("./event-descriptor"));
class ProxylessInput {
    constructor(dispatchEventFn, leftTopPoint) {
        this._dispatchEventFn = dispatchEventFn;
        this._leftTopPoint = leftTopPoint || new axis_values_1.default(0, 0);
    }
    mouseDown(options) {
        const eventOptions = event_descriptor_1.default.createMouseEventOptions('mousePressed', options, this._leftTopPoint);
        return this._dispatchEventFn.single(types_1.EventType.Mouse, eventOptions);
    }
    mouseUp(options) {
        const eventOptions = event_descriptor_1.default.createMouseEventOptions('mouseReleased', options, this._leftTopPoint);
        return this._dispatchEventFn.single(types_1.EventType.Mouse, eventOptions);
    }
    keyDown(options) {
        const eventOptions = event_descriptor_1.default.createKeyDownOptions(options);
        return this._dispatchEventFn.single(types_1.EventType.Keyboard, eventOptions);
    }
    keyUp(options) {
        const eventOptions = event_descriptor_1.default.createKeyUpOptions(options);
        return this._dispatchEventFn.single(types_1.EventType.Keyboard, eventOptions);
    }
    executeEventSequence(eventSequence) {
        return this._dispatchEventFn.sequence(eventSequence);
    }
}
exports.default = ProxylessInput;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJveHlsZXNzL2NsaWVudC9pbnB1dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLG9DQUFxQztBQUNyQyw2RkFBb0U7QUFHcEUsMEVBQW9EO0FBRXBELE1BQXFCLGNBQWM7SUFJL0IsWUFBYSxlQUFnQyxFQUFFLFlBQWlDO1FBQzVFLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxlQUFlLENBQUM7UUFDeEMsSUFBSSxDQUFDLGFBQWEsR0FBTSxZQUFZLElBQUksSUFBSSxxQkFBVSxDQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBRU0sU0FBUyxDQUFFLE9BQVk7UUFDMUIsTUFBTSxZQUFZLEdBQUcsMEJBQWtCLENBQUMsdUJBQXVCLENBQUMsY0FBYyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFN0csT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLGlCQUFTLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7SUFFTSxPQUFPLENBQUUsT0FBWTtRQUN4QixNQUFNLFlBQVksR0FBRywwQkFBa0IsQ0FBQyx1QkFBdUIsQ0FBQyxlQUFlLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUU5RyxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsaUJBQVMsQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUVNLE9BQU8sQ0FBRSxPQUF5QjtRQUNyQyxNQUFNLFlBQVksR0FBRywwQkFBa0IsQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV0RSxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsaUJBQVMsQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDMUUsQ0FBQztJQUNNLEtBQUssQ0FBRSxPQUF5QjtRQUNuQyxNQUFNLFlBQVksR0FBRywwQkFBa0IsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVwRSxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsaUJBQVMsQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDMUUsQ0FBQztJQUVNLG9CQUFvQixDQUFFLGFBQW9CO1FBQzdDLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN6RCxDQUFDO0NBQ0o7QUFuQ0QsaUNBbUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRUeXBlIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IEF4aXNWYWx1ZXMgZnJvbSAnLi4vLi4vY2xpZW50L2NvcmUvdXRpbHMvdmFsdWVzL2F4aXMtdmFsdWVzJztcbmltcG9ydCB7IFNpbXVsYXRlZEtleUluZm8gfSBmcm9tICcuL2tleS1wcmVzcy91dGlscyc7XG5pbXBvcnQgeyBEaXNwYXRjaEV2ZW50Rm4gfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCBDRFBFdmVudERlc2NyaXB0b3IgZnJvbSAnLi9ldmVudC1kZXNjcmlwdG9yJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJveHlsZXNzSW5wdXQge1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBfZGlzcGF0Y2hFdmVudEZuOiBEaXNwYXRjaEV2ZW50Rm47XG4gICAgcHJpdmF0ZSByZWFkb25seSBfbGVmdFRvcFBvaW50OiBBeGlzVmFsdWVzPG51bWJlcj47XG4gICAgY29uc3RydWN0b3IgKGRpc3BhdGNoRXZlbnRGbjogRGlzcGF0Y2hFdmVudEZuLCBsZWZ0VG9wUG9pbnQ/OiBBeGlzVmFsdWVzPG51bWJlcj4pIHtcbiAgICAgICAgdGhpcy5fZGlzcGF0Y2hFdmVudEZuID0gZGlzcGF0Y2hFdmVudEZuO1xuICAgICAgICB0aGlzLl9sZWZ0VG9wUG9pbnQgICAgPSBsZWZ0VG9wUG9pbnQgfHwgbmV3IEF4aXNWYWx1ZXM8bnVtYmVyPigwLCAwKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbW91c2VEb3duIChvcHRpb25zOiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgZXZlbnRPcHRpb25zID0gQ0RQRXZlbnREZXNjcmlwdG9yLmNyZWF0ZU1vdXNlRXZlbnRPcHRpb25zKCdtb3VzZVByZXNzZWQnLCBvcHRpb25zLCB0aGlzLl9sZWZ0VG9wUG9pbnQpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9kaXNwYXRjaEV2ZW50Rm4uc2luZ2xlKEV2ZW50VHlwZS5Nb3VzZSwgZXZlbnRPcHRpb25zKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbW91c2VVcCAob3B0aW9uczogYW55KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGV2ZW50T3B0aW9ucyA9IENEUEV2ZW50RGVzY3JpcHRvci5jcmVhdGVNb3VzZUV2ZW50T3B0aW9ucygnbW91c2VSZWxlYXNlZCcsIG9wdGlvbnMsIHRoaXMuX2xlZnRUb3BQb2ludCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rpc3BhdGNoRXZlbnRGbi5zaW5nbGUoRXZlbnRUeXBlLk1vdXNlLCBldmVudE9wdGlvbnMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBrZXlEb3duIChvcHRpb25zOiBTaW11bGF0ZWRLZXlJbmZvKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGV2ZW50T3B0aW9ucyA9IENEUEV2ZW50RGVzY3JpcHRvci5jcmVhdGVLZXlEb3duT3B0aW9ucyhvcHRpb25zKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fZGlzcGF0Y2hFdmVudEZuLnNpbmdsZShFdmVudFR5cGUuS2V5Ym9hcmQsIGV2ZW50T3B0aW9ucyk7XG4gICAgfVxuICAgIHB1YmxpYyBrZXlVcCAob3B0aW9uczogU2ltdWxhdGVkS2V5SW5mbyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBldmVudE9wdGlvbnMgPSBDRFBFdmVudERlc2NyaXB0b3IuY3JlYXRlS2V5VXBPcHRpb25zKG9wdGlvbnMpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9kaXNwYXRjaEV2ZW50Rm4uc2luZ2xlKEV2ZW50VHlwZS5LZXlib2FyZCwgZXZlbnRPcHRpb25zKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZXhlY3V0ZUV2ZW50U2VxdWVuY2UgKGV2ZW50U2VxdWVuY2U6IGFueVtdKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kaXNwYXRjaEV2ZW50Rm4uc2VxdWVuY2UoZXZlbnRTZXF1ZW5jZSk7XG4gICAgfVxufVxuIl19