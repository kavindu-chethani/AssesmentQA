"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateMouseButtonValue = exports.getModifiersBit = exports.getModifiersState = exports.calculateKeyModifiersValue = void 0;
const types_1 = require("./types");
// @ts-ignore
const hammerhead_1 = require("../../client/core/deps/hammerhead");
const EMPTY_MODIFIERS = {
    ctrl: false,
    alt: false,
    shift: false,
    meta: false,
};
function calculateKeyModifiersValue(modifiers) {
    let result = 0;
    if (!modifiers)
        return result;
    if (modifiers.ctrl)
        result |= types_1.KeyModifierValues.ctrl;
    if (modifiers.alt)
        result |= types_1.KeyModifierValues.alt;
    if (modifiers.shift)
        result |= types_1.KeyModifierValues.shift;
    if (modifiers.meta)
        result |= types_1.KeyModifierValues.meta;
    return result;
}
exports.calculateKeyModifiersValue = calculateKeyModifiersValue;
function getModifiersState(modifiersBit) {
    const modifiers = hammerhead_1.utils.extend({}, EMPTY_MODIFIERS);
    if (!modifiersBit)
        return modifiers;
    if (modifiersBit & types_1.KeyModifierValues.ctrl)
        modifiers.ctrl = true;
    if (modifiersBit & types_1.KeyModifierValues.alt)
        modifiers.alt = true;
    if (modifiersBit & types_1.KeyModifierValues.shift)
        modifiers.shift = true;
    if (modifiersBit & types_1.KeyModifierValues.meta)
        modifiers.meta = true;
    return modifiers;
}
exports.getModifiersState = getModifiersState;
function getModifiersBit(key) {
    // @ts-ignore
    return types_1.KeyModifierValues[key] || 0;
}
exports.getModifiersBit = getModifiersBit;
function calculateMouseButtonValue(options) {
    if (!options.button)
        return 'left';
    return 'right';
}
exports.calculateMouseButtonValue = calculateMouseButtonValue;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJveHlsZXNzL2NsaWVudC91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxtQ0FBMEQ7QUFHMUQsYUFBYTtBQUNiLGtFQUEwRDtBQUUxRCxNQUFNLGVBQWUsR0FBRztJQUNwQixJQUFJLEVBQUcsS0FBSztJQUNaLEdBQUcsRUFBSSxLQUFLO0lBQ1osS0FBSyxFQUFFLEtBQUs7SUFDWixJQUFJLEVBQUcsS0FBSztDQUNmLENBQUM7QUFFRixTQUFnQiwwQkFBMEIsQ0FBRSxTQUF3QjtJQUNoRSxJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFFZixJQUFJLENBQUMsU0FBUztRQUNWLE9BQU8sTUFBTSxDQUFDO0lBRWxCLElBQUksU0FBUyxDQUFDLElBQUk7UUFDZCxNQUFNLElBQUkseUJBQWlCLENBQUMsSUFBSSxDQUFDO0lBQ3JDLElBQUksU0FBUyxDQUFDLEdBQUc7UUFDYixNQUFNLElBQUkseUJBQWlCLENBQUMsR0FBRyxDQUFDO0lBQ3BDLElBQUksU0FBUyxDQUFDLEtBQUs7UUFDZixNQUFNLElBQUkseUJBQWlCLENBQUMsS0FBSyxDQUFDO0lBQ3RDLElBQUksU0FBUyxDQUFDLElBQUk7UUFDZCxNQUFNLElBQUkseUJBQWlCLENBQUMsSUFBSSxDQUFDO0lBRXJDLE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUM7QUFoQkQsZ0VBZ0JDO0FBRUQsU0FBZ0IsaUJBQWlCLENBQUUsWUFBcUI7SUFDcEQsTUFBTSxTQUFTLEdBQUcsa0JBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLGVBQWUsQ0FBaUIsQ0FBQztJQUVwRSxJQUFJLENBQUMsWUFBWTtRQUNiLE9BQU8sU0FBUyxDQUFDO0lBRXJCLElBQUksWUFBWSxHQUFHLHlCQUFpQixDQUFDLElBQUk7UUFDckMsU0FBUyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDMUIsSUFBSSxZQUFZLEdBQUcseUJBQWlCLENBQUMsR0FBRztRQUNwQyxTQUFTLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQztJQUN6QixJQUFJLFlBQVksR0FBRyx5QkFBaUIsQ0FBQyxLQUFLO1FBQ3RDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0lBQzNCLElBQUksWUFBWSxHQUFHLHlCQUFpQixDQUFDLElBQUk7UUFDckMsU0FBUyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFFMUIsT0FBTyxTQUFTLENBQUM7QUFDckIsQ0FBQztBQWhCRCw4Q0FnQkM7QUFFRCxTQUFnQixlQUFlLENBQUUsR0FBVztJQUN4QyxhQUFhO0lBQ2IsT0FBTyx5QkFBaUIsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdkMsQ0FBQztBQUhELDBDQUdDO0FBRUQsU0FBZ0IseUJBQXlCLENBQUUsT0FBWTtJQUNuRCxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU07UUFDZixPQUFPLE1BQU0sQ0FBQztJQUVsQixPQUFPLE9BQU8sQ0FBQztBQUNuQixDQUFDO0FBTEQsOERBS0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBLZXlNb2RpZmllcnMsIEtleU1vZGlmaWVyVmFsdWVzIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgUHJvdG9jb2wgZnJvbSAnZGV2dG9vbHMtcHJvdG9jb2wnO1xuaW1wb3J0IE1vdXNlQnV0dG9uID0gUHJvdG9jb2wuSW5wdXQuTW91c2VCdXR0b247XG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgeyB1dGlscyB9IGZyb20gJy4uLy4uL2NsaWVudC9jb3JlL2RlcHMvaGFtbWVyaGVhZCc7XG5cbmNvbnN0IEVNUFRZX01PRElGSUVSUyA9IHtcbiAgICBjdHJsOiAgZmFsc2UsXG4gICAgYWx0OiAgIGZhbHNlLFxuICAgIHNoaWZ0OiBmYWxzZSxcbiAgICBtZXRhOiAgZmFsc2UsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlS2V5TW9kaWZpZXJzVmFsdWUgKG1vZGlmaWVycz86IEtleU1vZGlmaWVycyk6IG51bWJlciB7XG4gICAgbGV0IHJlc3VsdCA9IDA7XG5cbiAgICBpZiAoIW1vZGlmaWVycylcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgIGlmIChtb2RpZmllcnMuY3RybClcbiAgICAgICAgcmVzdWx0IHw9IEtleU1vZGlmaWVyVmFsdWVzLmN0cmw7XG4gICAgaWYgKG1vZGlmaWVycy5hbHQpXG4gICAgICAgIHJlc3VsdCB8PSBLZXlNb2RpZmllclZhbHVlcy5hbHQ7XG4gICAgaWYgKG1vZGlmaWVycy5zaGlmdClcbiAgICAgICAgcmVzdWx0IHw9IEtleU1vZGlmaWVyVmFsdWVzLnNoaWZ0O1xuICAgIGlmIChtb2RpZmllcnMubWV0YSlcbiAgICAgICAgcmVzdWx0IHw9IEtleU1vZGlmaWVyVmFsdWVzLm1ldGE7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TW9kaWZpZXJzU3RhdGUgKG1vZGlmaWVyc0JpdD86IG51bWJlcik6IEtleU1vZGlmaWVycyB7XG4gICAgY29uc3QgbW9kaWZpZXJzID0gdXRpbHMuZXh0ZW5kKHt9LCBFTVBUWV9NT0RJRklFUlMpIGFzIEtleU1vZGlmaWVycztcblxuICAgIGlmICghbW9kaWZpZXJzQml0KVxuICAgICAgICByZXR1cm4gbW9kaWZpZXJzO1xuXG4gICAgaWYgKG1vZGlmaWVyc0JpdCAmIEtleU1vZGlmaWVyVmFsdWVzLmN0cmwpXG4gICAgICAgIG1vZGlmaWVycy5jdHJsID0gdHJ1ZTtcbiAgICBpZiAobW9kaWZpZXJzQml0ICYgS2V5TW9kaWZpZXJWYWx1ZXMuYWx0KVxuICAgICAgICBtb2RpZmllcnMuYWx0ID0gdHJ1ZTtcbiAgICBpZiAobW9kaWZpZXJzQml0ICYgS2V5TW9kaWZpZXJWYWx1ZXMuc2hpZnQpXG4gICAgICAgIG1vZGlmaWVycy5zaGlmdCA9IHRydWU7XG4gICAgaWYgKG1vZGlmaWVyc0JpdCAmIEtleU1vZGlmaWVyVmFsdWVzLm1ldGEpXG4gICAgICAgIG1vZGlmaWVycy5tZXRhID0gdHJ1ZTtcblxuICAgIHJldHVybiBtb2RpZmllcnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNb2RpZmllcnNCaXQgKGtleTogc3RyaW5nKTogbnVtYmVyIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcmV0dXJuIEtleU1vZGlmaWVyVmFsdWVzW2tleV0gfHwgMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZU1vdXNlQnV0dG9uVmFsdWUgKG9wdGlvbnM6IGFueSk6IE1vdXNlQnV0dG9uIHtcbiAgICBpZiAoIW9wdGlvbnMuYnV0dG9uKVxuICAgICAgICByZXR1cm4gJ2xlZnQnO1xuXG4gICAgcmV0dXJuICdyaWdodCc7XG59XG4iXX0=