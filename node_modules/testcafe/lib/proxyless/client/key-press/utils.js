"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.changeLetterCaseIfNecessary = exports.getSimulatedKeyInfo = void 0;
const get_key_info_1 = __importDefault(require("../../../client/automation/playback/press/get-key-info"));
// @ts-ignore
const hammerhead_1 = require("../../../client/core/deps/hammerhead");
// @ts-ignore
const testcafe_core_1 = require("../../../client/automation/deps/testcafe-core");
const utils_1 = require("../../../client/automation/playback/press/utils");
const utils_2 = require("../utils");
const get_key_code_1 = __importDefault(require("../../../client/automation/utils/get-key-code"));
function getSimulatedKeyInfo(keyCombination) {
    const keysArray = (0, testcafe_core_1.getKeyArray)(keyCombination);
    const { actualKeys, eventKeyProperties } = (0, utils_1.getActualKeysAndEventKeyProperties)(keysArray);
    return testcafe_core_1.arrayUtils.map(actualKeys, (key, index) => {
        return hammerhead_1.utils.extend({ key }, (0, get_key_info_1.default)(key, eventKeyProperties[index]));
    });
}
exports.getSimulatedKeyInfo = getSimulatedKeyInfo;
function changeLetterCaseIfNecessary(keyInfo) {
    const modifiersState = (0, utils_2.getModifiersState)(keyInfo.modifiers);
    if (modifiersState.shift && keyInfo.isLetter) {
        keyInfo.keyProperty = (0, utils_1.changeLetterCase)(keyInfo.keyProperty);
        keyInfo.keyCode = (0, get_key_code_1.default)(keyInfo.keyProperty);
    }
}
exports.changeLetterCaseIfNecessary = changeLetterCaseIfNecessary;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvcHJveHlsZXNzL2NsaWVudC9rZXktcHJlc3MvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsMEdBQWdGO0FBQ2hGLGFBQWE7QUFDYixxRUFBNkQ7QUFDN0QsYUFBYTtBQUNiLGlGQUF3RjtBQUN4RiwyRUFBdUg7QUFDdkgsb0NBQTZDO0FBQzdDLGlHQUF1RTtBQWF2RSxTQUFnQixtQkFBbUIsQ0FBRSxjQUFzQjtJQUN2RCxNQUFNLFNBQVMsR0FBNEIsSUFBQSwyQkFBVyxFQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3ZFLE1BQU0sRUFBRSxVQUFVLEVBQUUsa0JBQWtCLEVBQUUsR0FBRyxJQUFBLDBDQUFrQyxFQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRXpGLE9BQU8sMEJBQVUsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUMsR0FBVyxFQUFFLEtBQWEsRUFBRSxFQUFFO1FBQzdELE9BQU8sa0JBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxJQUFBLHNCQUFVLEVBQUMsR0FBRyxFQUFFLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3RSxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFQRCxrREFPQztBQUVELFNBQWdCLDJCQUEyQixDQUFFLE9BQXlCO0lBQ2xFLE1BQU0sY0FBYyxHQUFHLElBQUEseUJBQWlCLEVBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRTVELElBQUksY0FBYyxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsUUFBUSxFQUFFO1FBQzFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsSUFBQSx3QkFBZ0IsRUFBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDNUQsT0FBTyxDQUFDLE9BQU8sR0FBTyxJQUFBLHNCQUFVLEVBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0tBQ3pEO0FBQ0wsQ0FBQztBQVBELGtFQU9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGdldEtleUluZm8gZnJvbSAnLi4vLi4vLi4vY2xpZW50L2F1dG9tYXRpb24vcGxheWJhY2svcHJlc3MvZ2V0LWtleS1pbmZvJztcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCB7IHV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vY2xpZW50L2NvcmUvZGVwcy9oYW1tZXJoZWFkJztcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCB7IGdldEtleUFycmF5LCBhcnJheVV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vY2xpZW50L2F1dG9tYXRpb24vZGVwcy90ZXN0Y2FmZS1jb3JlJztcbmltcG9ydCB7IGNoYW5nZUxldHRlckNhc2UsIGdldEFjdHVhbEtleXNBbmRFdmVudEtleVByb3BlcnRpZXMgfSBmcm9tICcuLi8uLi8uLi9jbGllbnQvYXV0b21hdGlvbi9wbGF5YmFjay9wcmVzcy91dGlscyc7XG5pbXBvcnQgeyBnZXRNb2RpZmllcnNTdGF0ZSB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCBnZXRLZXlDb2RlIGZyb20gJy4uLy4uLy4uL2NsaWVudC9hdXRvbWF0aW9uL3V0aWxzL2dldC1rZXktY29kZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2ltdWxhdGVkS2V5SW5mbyB7XG4gICAga2V5OiBzdHJpbmc7XG4gICAga2V5Q29kZTogbnVtYmVyO1xuICAgIGtleVByb3BlcnR5OiBzdHJpbmc7XG4gICAgbW9kaWZpZXJzOiBudW1iZXI7XG4gICAgbW9kaWZpZXJLZXlDb2RlOiBudW1iZXI7XG4gICAgaXNMZXR0ZXI6IGJvb2xlYW47XG4gICAgaXNDaGFyOiBib29sZWFuO1xuICAgIGlzTmV3TGluZTogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNpbXVsYXRlZEtleUluZm8gKGtleUNvbWJpbmF0aW9uOiBzdHJpbmcpOiBTaW11bGF0ZWRLZXlJbmZvW10ge1xuICAgIGNvbnN0IGtleXNBcnJheSAgICAgICAgICAgICAgICAgICAgICAgICAgPSBnZXRLZXlBcnJheShrZXlDb21iaW5hdGlvbik7XG4gICAgY29uc3QgeyBhY3R1YWxLZXlzLCBldmVudEtleVByb3BlcnRpZXMgfSA9IGdldEFjdHVhbEtleXNBbmRFdmVudEtleVByb3BlcnRpZXMoa2V5c0FycmF5KTtcblxuICAgIHJldHVybiBhcnJheVV0aWxzLm1hcChhY3R1YWxLZXlzLCAoa2V5OiBzdHJpbmcsIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgcmV0dXJuIHV0aWxzLmV4dGVuZCh7IGtleSB9LCBnZXRLZXlJbmZvKGtleSwgZXZlbnRLZXlQcm9wZXJ0aWVzW2luZGV4XSkpO1xuICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hhbmdlTGV0dGVyQ2FzZUlmTmVjZXNzYXJ5IChrZXlJbmZvOiBTaW11bGF0ZWRLZXlJbmZvKTogdm9pZCB7XG4gICAgY29uc3QgbW9kaWZpZXJzU3RhdGUgPSBnZXRNb2RpZmllcnNTdGF0ZShrZXlJbmZvLm1vZGlmaWVycyk7XG5cbiAgICBpZiAobW9kaWZpZXJzU3RhdGUuc2hpZnQgJiYga2V5SW5mby5pc0xldHRlcikge1xuICAgICAgICBrZXlJbmZvLmtleVByb3BlcnR5ID0gY2hhbmdlTGV0dGVyQ2FzZShrZXlJbmZvLmtleVByb3BlcnR5KTtcbiAgICAgICAga2V5SW5mby5rZXlDb2RlICAgICA9IGdldEtleUNvZGUoa2V5SW5mby5rZXlQcm9wZXJ0eSk7XG4gICAgfVxufVxuIl19